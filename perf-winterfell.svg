<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>sock_write_iter (6,656,565,590 samples, 29.85%)</title><rect x="210.4" y="453" width="352.2" height="15.0" fill="rgb(242,168,26)" rx="2" ry="2" />
<text  x="213.41" y="463.5" >sock_write_iter</text>
</g>
<g >
<title>tcp_small_queue_check.isra.31 (10,101,010 samples, 0.05%)</title><rect x="546.6" y="357" width="0.5" height="15.0" fill="rgb(229,151,52)" rx="2" ry="2" />
<text  x="549.56" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, winterfell::Poller*, std::default_delete&lt;winterfell::Poller&gt; &gt;::_M_head (10,101,010 samples, 0.05%)</title><rect x="961.3" y="373" width="0.5" height="15.0" fill="rgb(234,64,1)" rx="2" ry="2" />
<text  x="964.27" y="383.5" ></text>
</g>
<g >
<title>lock_sock_nested (30,303,030 samples, 0.14%)</title><rect x="37.8" y="373" width="1.6" height="15.0" fill="rgb(247,91,34)" rx="2" ry="2" />
<text  x="40.79" y="383.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (131,313,130 samples, 0.59%)</title><rect x="248.4" y="277" width="6.9" height="15.0" fill="rgb(226,186,53)" rx="2" ry="2" />
<text  x="251.35" y="287.5" ></text>
</g>
<g >
<title>skb_entail (10,101,010 samples, 0.05%)</title><rect x="559.4" y="389" width="0.5" height="15.0" fill="rgb(213,161,13)" rx="2" ry="2" />
<text  x="562.38" y="399.5" ></text>
</g>
<g >
<title>schedule (50,505,050 samples, 0.23%)</title><rect x="201.3" y="485" width="2.7" height="15.0" fill="rgb(246,101,26)" rx="2" ry="2" />
<text  x="204.32" y="495.5" ></text>
</g>
<g >
<title>ksys_write (6,828,282,760 samples, 30.62%)</title><rect x="204.0" y="501" width="361.3" height="15.0" fill="rgb(239,221,42)" rx="2" ry="2" />
<text  x="206.99" y="511.5" >ksys_write</text>
</g>
<g >
<title>sock_sendmsg (6,646,464,580 samples, 29.80%)</title><rect x="210.9" y="437" width="351.7" height="15.0" fill="rgb(228,78,28)" rx="2" ry="2" />
<text  x="213.94" y="447.5" >sock_sendmsg</text>
</g>
<g >
<title>enqueue_to_backlog (30,303,030 samples, 0.14%)</title><rect x="251.6" y="229" width="1.6" height="15.0" fill="rgb(239,159,13)" rx="2" ry="2" />
<text  x="254.56" y="239.5" ></text>
</g>
<g >
<title>__kfree_skb (90,909,090 samples, 0.41%)</title><rect x="405.5" y="69" width="4.8" height="15.0" fill="rgb(241,225,28)" rx="2" ry="2" />
<text  x="408.47" y="79.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (2,757,575,730 samples, 12.36%)</title><rect x="282.6" y="117" width="145.9" height="15.0" fill="rgb(248,64,44)" rx="2" ry="2" />
<text  x="285.55" y="127.5" >tcp_v4_do_rcv</text>
</g>
<g >
<title>tcp_ack (333,333,330 samples, 1.49%)</title><rect x="399.6" y="85" width="17.6" height="15.0" fill="rgb(238,200,12)" rx="2" ry="2" />
<text  x="402.59" y="95.5" ></text>
</g>
<g >
<title>winterfell::TcpConnection::send (1,010,101,000 samples, 4.53%)</title><rect x="993.3" y="277" width="53.5" height="15.0" fill="rgb(248,5,47)" rx="2" ry="2" />
<text  x="996.33" y="287.5" >winte..</text>
</g>
<g >
<title>__alloc_pages_nodemask (10,101,010 samples, 0.05%)</title><rect x="555.1" y="277" width="0.5" height="15.0" fill="rgb(222,206,48)" rx="2" ry="2" />
<text  x="558.11" y="287.5" ></text>
</g>
<g >
<title>_cond_resched (20,202,020 samples, 0.09%)</title><rect x="214.1" y="389" width="1.1" height="15.0" fill="rgb(219,200,53)" rx="2" ry="2" />
<text  x="217.15" y="399.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;winterfell::TcpConnection&gt;::shared_from_this (70,707,070 samples, 0.32%)</title><rect x="973.6" y="325" width="3.7" height="15.0" fill="rgb(251,137,9)" rx="2" ry="2" />
<text  x="976.56" y="335.5" ></text>
</g>
<g >
<title>winterfell::EventLoop::isInLoopThread (383,838,380 samples, 1.72%)</title><rect x="1024.3" y="229" width="20.3" height="15.0" fill="rgb(226,224,46)" rx="2" ry="2" />
<text  x="1027.33" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,999,999,930 samples, 31.39%)</title><rect x="194.9" y="517" width="370.4" height="15.0" fill="rgb(222,71,30)" rx="2" ry="2" />
<text  x="197.91" y="527.5" >do_syscall_64</text>
</g>
<g >
<title>__kfree_skb (10,101,010 samples, 0.05%)</title><rect x="36.2" y="373" width="0.5" height="15.0" fill="rgb(249,142,6)" rx="2" ry="2" />
<text  x="39.19" y="383.5" ></text>
</g>
<g >
<title>_copy_from_user (30,303,030 samples, 0.14%)</title><rect x="180.5" y="421" width="1.6" height="15.0" fill="rgb(207,73,25)" rx="2" ry="2" />
<text  x="183.48" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (10,101,010 samples, 0.05%)</title><rect x="983.2" y="261" width="0.5" height="15.0" fill="rgb(227,47,48)" rx="2" ry="2" />
<text  x="986.18" y="271.5" ></text>
</g>
<g >
<title>winterfell::Timestamp::Timestamp (10,101,010 samples, 0.05%)</title><rect x="1106.6" y="437" width="0.6" height="15.0" fill="rgb(242,21,54)" rx="2" ry="2" />
<text  x="1109.63" y="447.5" ></text>
</g>
<g >
<title>__tcp_select_window (10,101,010 samples, 0.05%)</title><rect x="437.0" y="341" width="0.5" height="15.0" fill="rgb(238,9,20)" rx="2" ry="2" />
<text  x="440.00" y="351.5" ></text>
</g>
<g >
<title>skb_network_protocol (10,101,010 samples, 0.05%)</title><rect x="255.8" y="245" width="0.6" height="15.0" fill="rgb(210,29,30)" rx="2" ry="2" />
<text  x="258.83" y="255.5" ></text>
</g>
<g >
<title>fput (20,202,020 samples, 0.09%)</title><rect x="27.6" y="469" width="1.1" height="15.0" fill="rgb(234,106,43)" rx="2" ry="2" />
<text  x="30.64" y="479.5" ></text>
</g>
<g >
<title>fput (10,101,010 samples, 0.05%)</title><rect x="637.4" y="485" width="0.5" height="15.0" fill="rgb(228,110,1)" rx="2" ry="2" />
<text  x="640.41" y="495.5" ></text>
</g>
<g >
<title>__free_pages (10,101,010 samples, 0.05%)</title><rect x="647.6" y="469" width="0.5" height="15.0" fill="rgb(250,53,5)" rx="2" ry="2" />
<text  x="650.56" y="479.5" ></text>
</g>
<g >
<title>winterfell::EventLoop::assertInLoopThread (393,939,390 samples, 1.77%)</title><rect x="1023.8" y="245" width="20.8" height="15.0" fill="rgb(251,192,3)" rx="2" ry="2" />
<text  x="1026.80" y="255.5" ></text>
</g>
<g >
<title>sk_filter_trim_cap (10,101,010 samples, 0.05%)</title><rect x="281.0" y="117" width="0.5" height="15.0" fill="rgb(215,0,54)" rx="2" ry="2" />
<text  x="283.95" y="127.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (30,303,030 samples, 0.14%)</title><rect x="975.7" y="277" width="1.6" height="15.0" fill="rgb(248,92,34)" rx="2" ry="2" />
<text  x="978.70" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (40,404,040 samples, 0.18%)</title><rect x="993.9" y="261" width="2.1" height="15.0" fill="rgb(207,83,34)" rx="2" ry="2" />
<text  x="996.87" y="271.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, winterfell::Channel*, std::default_delete&lt;winterfell::Channel&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1051.6" y="277" width="0.5" height="15.0" fill="rgb(220,53,27)" rx="2" ry="2" />
<text  x="1054.59" y="287.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.05%)</title><rect x="555.1" y="261" width="0.5" height="15.0" fill="rgb(229,57,29)" rx="2" ry="2" />
<text  x="558.11" y="271.5" ></text>
</g>
<g >
<title>_copy_from_iter_full (50,505,050 samples, 0.23%)</title><rect x="547.1" y="389" width="2.7" height="15.0" fill="rgb(218,5,5)" rx="2" ry="2" />
<text  x="550.09" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;winterfell::Channel, std::default_delete&lt;winterfell::Channel&gt; &gt;::_M_ptr (70,707,070 samples, 0.32%)</title><rect x="1048.4" y="293" width="3.7" height="15.0" fill="rgb(254,134,31)" rx="2" ry="2" />
<text  x="1051.38" y="303.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (10,101,010 samples, 0.05%)</title><rect x="25.5" y="421" width="0.5" height="15.0" fill="rgb(218,51,31)" rx="2" ry="2" />
<text  x="28.50" y="431.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (80,808,080 samples, 0.36%)</title><rect x="570.1" y="549" width="4.2" height="15.0" fill="rgb(217,130,21)" rx="2" ry="2" />
<text  x="573.07" y="559.5" ></text>
</g>
<g >
<title>tcp_send_delayed_ack (20,202,020 samples, 0.09%)</title><rect x="426.8" y="85" width="1.1" height="15.0" fill="rgb(245,31,25)" rx="2" ry="2" />
<text  x="429.85" y="95.5" ></text>
</g>
<g >
<title>winterfell::TcpConnection::send (10,101,010 samples, 0.05%)</title><rect x="1047.8" y="293" width="0.6" height="15.0" fill="rgb(225,131,15)" rx="2" ry="2" />
<text  x="1050.84" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (20,202,020 samples, 0.09%)</title><rect x="986.4" y="277" width="1.1" height="15.0" fill="rgb(235,148,16)" rx="2" ry="2" />
<text  x="989.39" y="287.5" ></text>
</g>
<g >
<title>vfs_readv (2,909,090,880 samples, 13.04%)</title><rect x="29.2" y="469" width="154.0" height="15.0" fill="rgb(219,176,36)" rx="2" ry="2" />
<text  x="32.24" y="479.5" >vfs_readv</text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;pollfd const*, std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt; &gt; (20,202,020 samples, 0.09%)</title><rect x="1076.7" y="437" width="1.1" height="15.0" fill="rgb(219,36,45)" rx="2" ry="2" />
<text  x="1079.70" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,737,373,720 samples, 7.79%)</title><rect x="966.6" y="421" width="91.9" height="15.0" fill="rgb(210,77,26)" rx="2" ry="2" />
<text  x="969.61" y="431.5" >std::_Func..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.09%)</title><rect x="976.2" y="245" width="1.1" height="15.0" fill="rgb(253,113,51)" rx="2" ry="2" />
<text  x="979.23" y="255.5" ></text>
</g>
<g >
<title>process_backlog (3,111,111,080 samples, 13.95%)</title><rect x="266.5" y="213" width="164.6" height="15.0" fill="rgb(219,132,38)" rx="2" ry="2" />
<text  x="269.52" y="223.5" >process_backlog</text>
</g>
<g >
<title>winterfell::EventLoop::doPendingFunctors (10,101,010 samples, 0.05%)</title><rect x="957.0" y="469" width="0.5" height="15.0" fill="rgb(215,67,9)" rx="2" ry="2" />
<text  x="959.99" y="479.5" ></text>
</g>
<g >
<title>__vfs_write (20,202,020 samples, 0.09%)</title><rect x="208.3" y="469" width="1.0" height="15.0" fill="rgb(245,79,41)" rx="2" ry="2" />
<text  x="211.27" y="479.5" ></text>
</g>
<g >
<title>rcu_all_qs (10,101,010 samples, 0.05%)</title><rect x="212.0" y="373" width="0.5" height="15.0" fill="rgb(222,101,18)" rx="2" ry="2" />
<text  x="215.01" y="383.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (10,101,010 samples, 0.05%)</title><rect x="36.7" y="373" width="0.6" height="15.0" fill="rgb(244,4,46)" rx="2" ry="2" />
<text  x="39.72" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;void  (20,202,020 samples, 0.09%)</title><rect x="996.0" y="261" width="1.1" height="15.0" fill="rgb(230,105,32)" rx="2" ry="2" />
<text  x="999.01" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;winterfell::Poller, std::default_delete&lt;winterfell::Poller&gt; &gt;::_M_ptr (10,101,010 samples, 0.05%)</title><rect x="961.3" y="421" width="0.5" height="15.0" fill="rgb(211,106,22)" rx="2" ry="2" />
<text  x="964.27" y="431.5" ></text>
</g>
<g >
<title>dst_release (20,202,020 samples, 0.09%)</title><rect x="418.8" y="69" width="1.1" height="15.0" fill="rgb(235,170,7)" rx="2" ry="2" />
<text  x="421.83" y="79.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator@plt (10,101,010 samples, 0.05%)</title><rect x="989.6" y="277" width="0.5" height="15.0" fill="rgb(224,91,48)" rx="2" ry="2" />
<text  x="992.59" y="287.5" ></text>
</g>
<g >
<title>refcount_dec_and_test_checked (10,101,010 samples, 0.05%)</title><rect x="37.3" y="357" width="0.5" height="15.0" fill="rgb(221,106,16)" rx="2" ry="2" />
<text  x="40.26" y="367.5" ></text>
</g>
<g >
<title>validate_xmit_xfrm (20,202,020 samples, 0.09%)</title><rect x="256.9" y="277" width="1.1" height="15.0" fill="rgb(218,174,39)" rx="2" ry="2" />
<text  x="259.90" y="287.5" ></text>
</g>
<g >
<title>__fget_light (30,303,030 samples, 0.14%)</title><rect x="26.0" y="453" width="1.6" height="15.0" fill="rgb(223,183,17)" rx="2" ry="2" />
<text  x="29.03" y="463.5" ></text>
</g>
<g >
<title>timerfd_poll (30,303,030 samples, 0.14%)</title><rect x="867.2" y="485" width="1.6" height="15.0" fill="rgb(219,135,26)" rx="2" ry="2" />
<text  x="870.21" y="495.5" ></text>
</g>
<g >
<title>rcu_all_qs (10,101,010 samples, 0.05%)</title><rect x="170.9" y="341" width="0.5" height="15.0" fill="rgb(235,209,19)" rx="2" ry="2" />
<text  x="173.86" y="351.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="166.6" y="261" width="0.5" height="15.0" fill="rgb(237,89,43)" rx="2" ry="2" />
<text  x="169.59" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;winterfell::Channel, std::default_delete&lt;winterfell::Channel&gt; &gt;::get (20,202,020 samples, 0.09%)</title><rect x="1019.5" y="245" width="1.1" height="15.0" fill="rgb(237,80,46)" rx="2" ry="2" />
<text  x="1022.52" y="255.5" ></text>
</g>
<g >
<title>__check_heap_object (10,101,010 samples, 0.05%)</title><rect x="221.6" y="373" width="0.6" height="15.0" fill="rgb(210,226,29)" rx="2" ry="2" />
<text  x="224.63" y="383.5" ></text>
</g>
<g >
<title>winterfell::MutexLockGuard::~MutexLockGuard (20,202,020 samples, 0.09%)</title><rect x="1071.9" y="437" width="1.1" height="15.0" fill="rgb(213,129,36)" rx="2" ry="2" />
<text  x="1074.89" y="447.5" ></text>
</g>
<g >
<title>poll_schedule_timeout.constprop.17 (80,808,080 samples, 0.36%)</title><rect x="667.3" y="485" width="4.3" height="15.0" fill="rgb(237,25,17)" rx="2" ry="2" />
<text  x="670.34" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;winterfell::Channel**, std::vector&lt;winterfell::Channel*, std::allocator&lt;winterfell::Channel*&gt; &gt; &gt;::operator++ (10,101,010 samples, 0.05%)</title><rect x="958.6" y="453" width="0.5" height="15.0" fill="rgb(220,220,33)" rx="2" ry="2" />
<text  x="961.60" y="463.5" ></text>
</g>
<g >
<title>__check_object_size (40,404,040 samples, 0.18%)</title><rect x="221.1" y="389" width="2.1" height="15.0" fill="rgb(242,41,20)" rx="2" ry="2" />
<text  x="224.10" y="399.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (10,101,010 samples, 0.05%)</title><rect x="985.3" y="293" width="0.6" height="15.0" fill="rgb(248,34,48)" rx="2" ry="2" />
<text  x="988.32" y="303.5" ></text>
</g>
<g >
<title>ktime_get_ts64 (1,323,232,310 samples, 5.93%)</title><rect x="672.7" y="469" width="70.0" height="15.0" fill="rgb(236,188,35)" rx="2" ry="2" />
<text  x="675.68" y="479.5" >ktime_g..</text>
</g>
<g >
<title>std::get&lt;0ul, winterfell::TcpConnection*&gt; (10,101,010 samples, 0.05%)</title><rect x="1058.0" y="389" width="0.5" height="15.0" fill="rgb(252,102,38)" rx="2" ry="2" />
<text  x="1061.00" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;pollfd const*, std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt; &gt; (20,202,020 samples, 0.09%)</title><rect x="1083.7" y="421" width="1.0" height="15.0" fill="rgb(241,201,20)" rx="2" ry="2" />
<text  x="1086.65" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (30,303,030 samples, 0.14%)</title><rect x="1060.7" y="421" width="1.6" height="15.0" fill="rgb(244,17,15)" rx="2" ry="2" />
<text  x="1063.67" y="431.5" ></text>
</g>
<g >
<title>winterfell::MutexLockGuard::~MutexLockGuard (10,101,010 samples, 0.05%)</title><rect x="1073.5" y="453" width="0.5" height="15.0" fill="rgb(245,141,23)" rx="2" ry="2" />
<text  x="1076.50" y="463.5" ></text>
</g>
<g >
<title>__pthread_mutex_lock (30,303,030 samples, 0.14%)</title><rect x="1062.3" y="421" width="1.6" height="15.0" fill="rgb(219,222,43)" rx="2" ry="2" />
<text  x="1065.27" y="431.5" ></text>
</g>
<g >
<title>__tcp_v4_send_check (10,101,010 samples, 0.05%)</title><rect x="437.5" y="341" width="0.6" height="15.0" fill="rgb(229,71,48)" rx="2" ry="2" />
<text  x="440.54" y="351.5" ></text>
</g>
<g >
<title>rw_verify_area (30,303,030 samples, 0.14%)</title><rect x="173.5" y="437" width="1.6" height="15.0" fill="rgb(229,47,30)" rx="2" ry="2" />
<text  x="176.53" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::_S_value (40,404,040 samples, 0.18%)</title><rect x="1087.4" y="357" width="2.1" height="15.0" fill="rgb(240,211,0)" rx="2" ry="2" />
<text  x="1090.39" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,090,909,060 samples, 13.86%)</title><rect x="19.6" y="517" width="163.6" height="15.0" fill="rgb(242,82,39)" rx="2" ry="2" />
<text  x="22.62" y="527.5" >entry_SYSCALL_64_afte..</text>
</g>
<g >
<title>std::_Function_base::_M_empty (10,101,010 samples, 0.05%)</title><rect x="1019.0" y="245" width="0.5" height="15.0" fill="rgb(214,142,52)" rx="2" ry="2" />
<text  x="1021.99" y="255.5" ></text>
</g>
<g >
<title>tcp_event_new_data_sent (90,909,090 samples, 0.41%)</title><rect x="541.2" y="357" width="4.8" height="15.0" fill="rgb(246,91,22)" rx="2" ry="2" />
<text  x="544.21" y="367.5" ></text>
</g>
<g >
<title>finish_task_switch (10,101,010 samples, 0.05%)</title><rect x="1063.3" y="325" width="0.6" height="15.0" fill="rgb(206,57,42)" rx="2" ry="2" />
<text  x="1066.34" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;winterfell::Channel, std::default_delete&lt;winterfell::Channel&gt; &gt;::get (70,707,070 samples, 0.32%)</title><rect x="1048.4" y="309" width="3.7" height="15.0" fill="rgb(230,179,20)" rx="2" ry="2" />
<text  x="1051.38" y="319.5" ></text>
</g>
<g >
<title>token (10,101,010 samples, 0.05%)</title><rect x="1052.1" y="325" width="0.6" height="15.0" fill="rgb(246,221,8)" rx="2" ry="2" />
<text  x="1055.12" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (50,505,050 samples, 0.23%)</title><rect x="1069.2" y="373" width="2.7" height="15.0" fill="rgb(207,144,50)" rx="2" ry="2" />
<text  x="1072.22" y="383.5" ></text>
</g>
<g >
<title>preempt_schedule_common (10,101,010 samples, 0.05%)</title><rect x="633.7" y="453" width="0.5" height="15.0" fill="rgb(254,83,41)" rx="2" ry="2" />
<text  x="636.67" y="463.5" ></text>
</g>
<g >
<title>__fget_light (575,757,570 samples, 2.58%)</title><rect x="601.1" y="485" width="30.4" height="15.0" fill="rgb(205,188,1)" rx="2" ry="2" />
<text  x="604.07" y="495.5" >__..</text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;::_M_valptr (20,202,020 samples, 0.09%)</title><rect x="1088.5" y="341" width="1.0" height="15.0" fill="rgb(228,206,11)" rx="2" ry="2" />
<text  x="1091.46" y="351.5" ></text>
</g>
<g >
<title>poll_select_set_timeout (1,636,363,620 samples, 7.34%)</title><rect x="868.8" y="501" width="86.6" height="15.0" fill="rgb(218,213,53)" rx="2" ry="2" />
<text  x="871.81" y="511.5" >poll_selec..</text>
</g>
<g >
<title>winterfell::TcpConnection::handleRead (1,595,959,580 samples, 7.16%)</title><rect x="971.4" y="341" width="84.5" height="15.0" fill="rgb(254,44,26)" rx="2" ry="2" />
<text  x="974.42" y="351.5" >winterfel..</text>
</g>
<g >
<title>__kfree_skb_flush (10,101,010 samples, 0.05%)</title><rect x="266.0" y="213" width="0.5" height="15.0" fill="rgb(224,215,43)" rx="2" ry="2" />
<text  x="268.99" y="223.5" ></text>
</g>
<g >
<title>tcp_rack_advance (30,303,030 samples, 0.14%)</title><rect x="415.6" y="69" width="1.6" height="15.0" fill="rgb(233,216,9)" rx="2" ry="2" />
<text  x="418.62" y="79.5" ></text>
</g>
<g >
<title>tcp_schedule_loss_probe (10,101,010 samples, 0.05%)</title><rect x="546.0" y="357" width="0.6" height="15.0" fill="rgb(227,139,16)" rx="2" ry="2" />
<text  x="549.02" y="367.5" ></text>
</g>
<g >
<title>get_page_from_freelist (30,303,030 samples, 0.14%)</title><rect x="838.9" y="405" width="1.6" height="15.0" fill="rgb(224,101,30)" rx="2" ry="2" />
<text  x="841.89" y="415.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;winterfell::TcpConnection,  (60,606,060 samples, 0.27%)</title><rect x="974.1" y="293" width="3.2" height="15.0" fill="rgb(248,186,21)" rx="2" ry="2" />
<text  x="977.09" y="303.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="742.2" y="389" width="0.5" height="15.0" fill="rgb(223,175,18)" rx="2" ry="2" />
<text  x="745.16" y="399.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.05%)</title><rect x="166.6" y="277" width="0.5" height="15.0" fill="rgb(215,85,13)" rx="2" ry="2" />
<text  x="169.59" y="287.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="1051.1" y="245" width="0.5" height="15.0" fill="rgb(227,200,3)" rx="2" ry="2" />
<text  x="1054.05" y="255.5" ></text>
</g>
<g >
<title>tcp_send_mss (20,202,020 samples, 0.09%)</title><rect x="561.0" y="389" width="1.1" height="15.0" fill="rgb(234,154,16)" rx="2" ry="2" />
<text  x="563.99" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;winterfell::Poller, std::default_delete&lt;winterfell::Poller&gt; &gt;::get (10,101,010 samples, 0.05%)</title><rect x="960.2" y="453" width="0.5" height="15.0" fill="rgb(229,34,44)" rx="2" ry="2" />
<text  x="963.20" y="463.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="1068.7" y="373" width="0.5" height="15.0" fill="rgb(243,197,54)" rx="2" ry="2" />
<text  x="1071.69" y="383.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, winterfell::Channel*, std::default_delete&lt;winterfell::Channel&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1022.7" y="181" width="0.6" height="15.0" fill="rgb(225,20,45)" rx="2" ry="2" />
<text  x="1025.73" y="191.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (30,303,030 samples, 0.14%)</title><rect x="397.5" y="53" width="1.6" height="15.0" fill="rgb(230,63,24)" rx="2" ry="2" />
<text  x="400.45" y="63.5" ></text>
</g>
<g >
<title>winterfell::MutexLockGuard::MutexLockGuard (181,818,180 samples, 0.82%)</title><rect x="1062.3" y="437" width="9.6" height="15.0" fill="rgb(216,83,9)" rx="2" ry="2" />
<text  x="1065.27" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create@plt (10,101,010 samples, 0.05%)</title><rect x="983.7" y="261" width="0.5" height="15.0" fill="rgb(213,122,44)" rx="2" ry="2" />
<text  x="986.71" y="271.5" ></text>
</g>
<g >
<title>winterfell::Buffer::readableBytes (20,202,020 samples, 0.09%)</title><rect x="990.7" y="277" width="1.0" height="15.0" fill="rgb(250,77,31)" rx="2" ry="2" />
<text  x="993.66" y="287.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="1044.1" y="117" width="0.5" height="15.0" fill="rgb(212,29,13)" rx="2" ry="2" />
<text  x="1047.10" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;::_M_ptr (10,101,010 samples, 0.05%)</title><rect x="1089.0" y="325" width="0.5" height="15.0" fill="rgb(208,41,6)" rx="2" ry="2" />
<text  x="1091.99" y="335.5" ></text>
</g>
<g >
<title>tcp_release_cb (10,101,010 samples, 0.05%)</title><rect x="39.4" y="357" width="0.5" height="15.0" fill="rgb(254,222,33)" rx="2" ry="2" />
<text  x="42.39" y="367.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="44.2" y="309" width="0.5" height="15.0" fill="rgb(212,208,16)" rx="2" ry="2" />
<text  x="47.20" y="319.5" ></text>
</g>
<g >
<title>std::forward&lt;std::shared_ptr&lt;winterfell::TcpConnection&gt; const&amp;&gt; (10,101,010 samples, 0.05%)</title><rect x="977.3" y="325" width="0.5" height="15.0" fill="rgb(227,193,41)" rx="2" ry="2" />
<text  x="980.30" y="335.5" ></text>
</g>
<g >
<title>sock_poll (2,343,434,320 samples, 10.51%)</title><rect x="743.2" y="485" width="124.0" height="15.0" fill="rgb(252,32,48)" rx="2" ry="2" />
<text  x="746.22" y="495.5" >sock_poll</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;winterfell::Channel**, std::vector&lt;winterfell::Channel*, std::allocator&lt;winterfell::Channel*&gt; &gt; &gt;::operator++ (10,101,010 samples, 0.05%)</title><rect x="956.5" y="469" width="0.5" height="15.0" fill="rgb(237,206,40)" rx="2" ry="2" />
<text  x="959.46" y="479.5" ></text>
</g>
<g >
<title>set_normalized_timespec64 (10,101,010 samples, 0.05%)</title><rect x="742.7" y="469" width="0.5" height="15.0" fill="rgb(223,6,50)" rx="2" ry="2" />
<text  x="745.69" y="479.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (151,515,150 samples, 0.68%)</title><rect x="648.1" y="469" width="8.0" height="15.0" fill="rgb(241,122,18)" rx="2" ry="2" />
<text  x="651.10" y="479.5" ></text>
</g>
<g >
<title>__alloc_skb (181,818,180 samples, 0.82%)</title><rect x="549.8" y="373" width="9.6" height="15.0" fill="rgb(209,31,36)" rx="2" ry="2" />
<text  x="552.76" y="383.5" ></text>
</g>
<g >
<title>sched_clock (1,919,191,900 samples, 8.61%)</title><rect x="439.7" y="341" width="101.5" height="15.0" fill="rgb(239,202,34)" rx="2" ry="2" />
<text  x="442.67" y="351.5" >sched_clock</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;winterfell::Channel*&gt;::construct&lt;winterfell::Channel*, winterfell::Channel* const&amp;&gt; (10,101,010 samples, 0.05%)</title><rect x="1100.2" y="389" width="0.6" height="15.0" fill="rgb(243,144,44)" rx="2" ry="2" />
<text  x="1103.22" y="399.5" ></text>
</g>
<g >
<title>rw_verify_area (10,101,010 samples, 0.05%)</title><rect x="562.6" y="469" width="0.5" height="15.0" fill="rgb(246,26,30)" rx="2" ry="2" />
<text  x="565.59" y="479.5" ></text>
</g>
<g >
<title>[unknown] (50,505,050 samples, 0.23%)</title><rect x="981.6" y="293" width="2.6" height="15.0" fill="rgb(212,97,48)" rx="2" ry="2" />
<text  x="984.58" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;winterfell::Poller, std::default_delete&lt;winterfell::Poller&gt; &gt;::operator (20,202,020 samples, 0.09%)</title><rect x="960.7" y="453" width="1.1" height="15.0" fill="rgb(235,218,38)" rx="2" ry="2" />
<text  x="963.73" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::end (40,404,040 samples, 0.18%)</title><rect x="1097.5" y="421" width="2.2" height="15.0" fill="rgb(243,97,35)" rx="2" ry="2" />
<text  x="1100.55" y="431.5" ></text>
</g>
<g >
<title>ip_rcv (3,020,201,990 samples, 13.54%)</title><rect x="271.3" y="181" width="159.8" height="15.0" fill="rgb(254,126,19)" rx="2" ry="2" />
<text  x="274.33" y="191.5" >ip_rcv</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.05%)</title><rect x="25.5" y="405" width="0.5" height="15.0" fill="rgb(233,11,53)" rx="2" ry="2" />
<text  x="28.50" y="415.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (10,101,010 samples, 0.05%)</title><rect x="1063.3" y="389" width="0.6" height="15.0" fill="rgb(205,20,37)" rx="2" ry="2" />
<text  x="1066.34" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;pollfd const*, std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt; &gt;::operator++ (10,101,010 samples, 0.05%)</title><rect x="1076.2" y="437" width="0.5" height="15.0" fill="rgb(226,117,38)" rx="2" ry="2" />
<text  x="1079.17" y="447.5" ></text>
</g>
<g >
<title>readv@plt (10,101,010 samples, 0.05%)</title><rect x="973.0" y="325" width="0.6" height="15.0" fill="rgb(243,137,15)" rx="2" ry="2" />
<text  x="976.03" y="335.5" ></text>
</g>
<g >
<title>std::_Bind&lt;void  (1,727,272,710 samples, 7.74%)</title><rect x="967.1" y="405" width="91.4" height="15.0" fill="rgb(236,30,25)" rx="2" ry="2" />
<text  x="970.15" y="415.5" >std::_Bind..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::_S_value (10,101,010 samples, 0.05%)</title><rect x="1097.0" y="389" width="0.5" height="15.0" fill="rgb(218,223,34)" rx="2" ry="2" />
<text  x="1100.01" y="399.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.05%)</title><rect x="44.2" y="277" width="0.5" height="15.0" fill="rgb(219,220,24)" rx="2" ry="2" />
<text  x="47.20" y="287.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (20,202,020 samples, 0.09%)</title><rect x="978.4" y="309" width="1.0" height="15.0" fill="rgb(243,115,3)" rx="2" ry="2" />
<text  x="981.37" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;winterfell::Channel, std::default_delete&lt;winterfell::Channel&gt; &gt;::operator (70,707,070 samples, 0.32%)</title><rect x="1048.4" y="325" width="3.7" height="15.0" fill="rgb(238,218,45)" rx="2" ry="2" />
<text  x="1051.38" y="335.5" ></text>
</g>
<g >
<title>sock_recvmsg (101,010,100 samples, 0.45%)</title><rect x="167.1" y="405" width="5.4" height="15.0" fill="rgb(240,7,17)" rx="2" ry="2" />
<text  x="170.12" y="415.5" ></text>
</g>
<g >
<title>start_thread (4,414,141,370 samples, 19.79%)</title><rect x="956.5" y="565" width="233.5" height="15.0" fill="rgb(236,2,27)" rx="2" ry="2" />
<text  x="959.46" y="575.5" >start_thread</text>
</g>
<g >
<title>std::_Bind&lt;void  (1,717,171,700 samples, 7.70%)</title><rect x="967.1" y="389" width="90.9" height="15.0" fill="rgb(242,59,18)" rx="2" ry="2" />
<text  x="970.15" y="399.5" >std::_Bind..</text>
</g>
<g >
<title>__usecs_to_jiffies (10,101,010 samples, 0.05%)</title><rect x="546.0" y="341" width="0.6" height="15.0" fill="rgb(231,159,7)" rx="2" ry="2" />
<text  x="549.02" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;winterfell::Channel*, std::allocator&lt;winterfell::Channel*&gt; &gt;::_M_get_Tp_allocator (10,101,010 samples, 0.05%)</title><rect x="962.9" y="437" width="0.5" height="15.0" fill="rgb(221,213,32)" rx="2" ry="2" />
<text  x="965.87" y="447.5" ></text>
</g>
<g >
<title>skb_release_data (30,303,030 samples, 0.14%)</title><rect x="408.7" y="53" width="1.6" height="15.0" fill="rgb(251,194,11)" rx="2" ry="2" />
<text  x="411.68" y="63.5" ></text>
</g>
<g >
<title>kernel_poison_pages (10,101,010 samples, 0.05%)</title><rect x="664.7" y="437" width="0.5" height="15.0" fill="rgb(210,217,9)" rx="2" ry="2" />
<text  x="667.66" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;winterfell::Channel, std::default_delete&lt;winterfell::Channel&gt; &gt;::_M_ptr (10,101,010 samples, 0.05%)</title><rect x="1020.6" y="229" width="0.5" height="15.0" fill="rgb(234,66,13)" rx="2" ry="2" />
<text  x="1023.59" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;std::function&lt;void  (20,202,020 samples, 0.09%)</title><rect x="1058.5" y="437" width="1.1" height="15.0" fill="rgb(233,223,49)" rx="2" ry="2" />
<text  x="1061.53" y="447.5" ></text>
</g>
<g >
<title>__wmemset_sse2_unaligned (10,101,010 samples, 0.05%)</title><rect x="955.4" y="565" width="0.5" height="15.0" fill="rgb(238,227,16)" rx="2" ry="2" />
<text  x="958.39" y="575.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="742.2" y="437" width="0.5" height="15.0" fill="rgb(243,107,10)" rx="2" ry="2" />
<text  x="745.16" y="447.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (80,808,080 samples, 0.36%)</title><rect x="667.3" y="469" width="4.3" height="15.0" fill="rgb(242,189,34)" rx="2" ry="2" />
<text  x="670.34" y="479.5" ></text>
</g>
<g >
<title>[[vdso]] (1,484,848,470 samples, 6.66%)</title><rect x="1108.2" y="405" width="78.6" height="15.0" fill="rgb(223,147,40)" rx="2" ry="2" />
<text  x="1111.23" y="415.5" >[[vdso]]</text>
</g>
<g >
<title>__x64_sys_gettid (20,202,020 samples, 0.09%)</title><rect x="1070.8" y="357" width="1.1" height="15.0" fill="rgb(205,229,22)" rx="2" ry="2" />
<text  x="1073.82" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, winterfell::Channel*, std::default_delete&lt;winterfell::Channel&gt; &gt;::_M_head (20,202,020 samples, 0.09%)</title><rect x="1021.7" y="181" width="1.0" height="15.0" fill="rgb(244,26,43)" rx="2" ry="2" />
<text  x="1024.66" y="191.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, winterfell::Channel*, false&gt;::_M_head (10,101,010 samples, 0.05%)</title><rect x="1022.7" y="165" width="0.6" height="15.0" fill="rgb(245,74,11)" rx="2" ry="2" />
<text  x="1025.73" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.05%)</title><rect x="636.9" y="469" width="0.5" height="15.0" fill="rgb(245,129,39)" rx="2" ry="2" />
<text  x="639.88" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::_S_value (10,101,010 samples, 0.05%)</title><rect x="1095.9" y="373" width="0.6" height="15.0" fill="rgb(237,32,38)" rx="2" ry="2" />
<text  x="1098.94" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (222,222,220 samples, 1.00%)</title><rect x="1006.2" y="229" width="11.7" height="15.0" fill="rgb(238,147,23)" rx="2" ry="2" />
<text  x="1009.16" y="239.5" ></text>
</g>
<g >
<title>bictcp_cwnd_event (20,202,020 samples, 0.09%)</title><rect x="438.1" y="341" width="1.0" height="15.0" fill="rgb(240,182,7)" rx="2" ry="2" />
<text  x="441.07" y="351.5" ></text>
</g>
<g >
<title>__kmalloc_reserve.isra.48 (90,909,090 samples, 0.41%)</title><rect x="550.8" y="357" width="4.8" height="15.0" fill="rgb(236,34,51)" rx="2" ry="2" />
<text  x="553.83" y="367.5" ></text>
</g>
<g >
<title>__skb_clone (20,202,020 samples, 0.09%)</title><rect x="435.9" y="341" width="1.1" height="15.0" fill="rgb(222,21,39)" rx="2" ry="2" />
<text  x="438.93" y="351.5" ></text>
</g>
<g >
<title>aa_file_perm (10,101,010 samples, 0.05%)</title><rect x="564.7" y="437" width="0.6" height="15.0" fill="rgb(224,219,34)" rx="2" ry="2" />
<text  x="567.73" y="447.5" ></text>
</g>
<g >
<title>sock_put (20,202,020 samples, 0.09%)</title><rect x="281.5" y="117" width="1.1" height="15.0" fill="rgb(211,183,6)" rx="2" ry="2" />
<text  x="284.49" y="127.5" ></text>
</g>
<g >
<title>validate_xmit_skb (30,303,030 samples, 0.14%)</title><rect x="255.3" y="277" width="1.6" height="15.0" fill="rgb(233,0,34)" rx="2" ry="2" />
<text  x="258.30" y="287.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,333,333,320 samples, 5.98%)</title><rect x="977.8" y="325" width="70.6" height="15.0" fill="rgb(230,222,40)" rx="2" ry="2" />
<text  x="980.84" y="335.5" >std::fu..</text>
</g>
<g >
<title>rb_first (10,101,010 samples, 0.05%)</title><rect x="412.4" y="69" width="0.6" height="15.0" fill="rgb(249,220,10)" rx="2" ry="2" />
<text  x="415.42" y="79.5" ></text>
</g>
<g >
<title>new_slab (20,202,020 samples, 0.09%)</title><rect x="558.3" y="309" width="1.1" height="15.0" fill="rgb(249,82,30)" rx="2" ry="2" />
<text  x="561.32" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;winterfell::Channel**&gt; (10,101,010 samples, 0.05%)</title><rect x="963.4" y="421" width="0.5" height="15.0" fill="rgb(231,208,5)" rx="2" ry="2" />
<text  x="966.41" y="431.5" ></text>
</g>
<g >
<title>winterfell::Buffer::writableBytes (20,202,020 samples, 0.09%)</title><rect x="1054.8" y="309" width="1.1" height="15.0" fill="rgb(222,42,51)" rx="2" ry="2" />
<text  x="1057.79" y="319.5" ></text>
</g>
<g >
<title>getifaddrs_internal (151,515,150 samples, 0.68%)</title><rect x="1063.9" y="405" width="8.0" height="15.0" fill="rgb(210,178,46)" rx="2" ry="2" />
<text  x="1066.88" y="415.5" ></text>
</g>
<g >
<title>security_file_permission (70,707,070 samples, 0.32%)</title><rect x="175.1" y="437" width="3.8" height="15.0" fill="rgb(208,104,53)" rx="2" ry="2" />
<text  x="178.14" y="447.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (3,191,919,160 samples, 14.31%)</title><rect x="262.2" y="245" width="168.9" height="15.0" fill="rgb(238,120,40)" rx="2" ry="2" />
<text  x="265.25" y="255.5" >__softirqentry_text_s..</text>
</g>
<g >
<title>tcp_wfree (20,202,020 samples, 0.09%)</title><rect x="254.2" y="245" width="1.1" height="15.0" fill="rgb(235,168,38)" rx="2" ry="2" />
<text  x="257.23" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_bh (30,303,030 samples, 0.14%)</title><rect x="37.8" y="357" width="1.6" height="15.0" fill="rgb(216,130,13)" rx="2" ry="2" />
<text  x="40.79" y="367.5" ></text>
</g>
<g >
<title>__cgroup_bpf_run_filter_skb (80,808,080 samples, 0.36%)</title><rect x="431.1" y="293" width="4.3" height="15.0" fill="rgb(223,150,35)" rx="2" ry="2" />
<text  x="434.12" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,303,030,290 samples, 5.84%)</title><rect x="979.4" y="309" width="69.0" height="15.0" fill="rgb(244,218,38)" rx="2" ry="2" />
<text  x="982.44" y="319.5" >std::_F..</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (10,101,010 samples, 0.05%)</title><rect x="1063.3" y="405" width="0.6" height="15.0" fill="rgb(232,166,35)" rx="2" ry="2" />
<text  x="1066.34" y="415.5" ></text>
</g>
<g >
<title>skb_release_head_state (30,303,030 samples, 0.14%)</title><rect x="407.1" y="37" width="1.6" height="15.0" fill="rgb(235,91,19)" rx="2" ry="2" />
<text  x="410.07" y="47.5" ></text>
</g>
<g >
<title>tcp_poll (1,373,737,360 samples, 6.16%)</title><rect x="794.5" y="469" width="72.7" height="15.0" fill="rgb(229,187,17)" rx="2" ry="2" />
<text  x="797.53" y="479.5" >tcp_poll</text>
</g>
<g >
<title>winterfell::TcpConnection::handleRead (10,101,010 samples, 0.05%)</title><rect x="1055.9" y="357" width="0.5" height="15.0" fill="rgb(229,141,15)" rx="2" ry="2" />
<text  x="1058.86" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,414,141,370 samples, 19.79%)</title><rect x="956.5" y="517" width="233.5" height="15.0" fill="rgb(214,36,0)" rx="2" ry="2" />
<text  x="959.46" y="527.5" >std::function&lt;void </text>
</g>
<g >
<title>rcu_all_qs (10,101,010 samples, 0.05%)</title><rect x="214.7" y="373" width="0.5" height="15.0" fill="rgb(230,42,33)" rx="2" ry="2" />
<text  x="217.68" y="383.5" ></text>
</g>
<g >
<title>ip_finish_output2 (3,595,959,560 samples, 16.12%)</title><rect x="240.9" y="309" width="190.2" height="15.0" fill="rgb(248,49,24)" rx="2" ry="2" />
<text  x="243.87" y="319.5" >ip_finish_output2</text>
</g>
<g >
<title>skb_free_head (10,101,010 samples, 0.05%)</title><rect x="406.0" y="53" width="0.5" height="15.0" fill="rgb(212,201,47)" rx="2" ry="2" />
<text  x="409.01" y="63.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (2,909,090,880 samples, 13.04%)</title><rect x="274.5" y="133" width="154.0" height="15.0" fill="rgb(249,212,6)" rx="2" ry="2" />
<text  x="277.54" y="143.5" >tcp_v4_rcv</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (20,202,020 samples, 0.09%)</title><rect x="974.6" y="277" width="1.1" height="15.0" fill="rgb(208,83,18)" rx="2" ry="2" />
<text  x="977.63" y="287.5" ></text>
</g>
<g >
<title>____wcstod_l_internal (20,202,020 samples, 0.09%)</title><rect x="981.6" y="261" width="1.0" height="15.0" fill="rgb(234,2,52)" rx="2" ry="2" />
<text  x="984.58" y="271.5" ></text>
</g>
<g >
<title>ip_local_deliver (2,969,696,940 samples, 13.32%)</title><rect x="271.3" y="165" width="157.2" height="15.0" fill="rgb(240,42,29)" rx="2" ry="2" />
<text  x="274.33" y="175.5" >ip_local_deliver</text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="954.9" y="453" width="0.5" height="15.0" fill="rgb(240,108,54)" rx="2" ry="2" />
<text  x="957.86" y="463.5" ></text>
</g>
<g >
<title>fput_many (141,414,140 samples, 0.63%)</title><rect x="656.6" y="469" width="7.5" height="15.0" fill="rgb(229,124,7)" rx="2" ry="2" />
<text  x="659.65" y="479.5" ></text>
</g>
<g >
<title>onMessage (1,151,515,140 samples, 5.16%)</title><rect x="985.9" y="293" width="60.9" height="15.0" fill="rgb(217,113,45)" rx="2" ry="2" />
<text  x="988.85" y="303.5" >onMess..</text>
</g>
<g >
<title>__schedule (80,808,080 samples, 0.36%)</title><rect x="667.3" y="437" width="4.3" height="15.0" fill="rgb(210,224,45)" rx="2" ry="2" />
<text  x="670.34" y="447.5" ></text>
</g>
<g >
<title>eventfd_poll (30,303,030 samples, 0.14%)</title><rect x="635.8" y="485" width="1.6" height="15.0" fill="rgb(221,137,29)" rx="2" ry="2" />
<text  x="638.81" y="495.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, winterfell::TcpConnection*&gt;::_M_head (10,101,010 samples, 0.05%)</title><rect x="1057.5" y="341" width="0.5" height="15.0" fill="rgb(205,211,45)" rx="2" ry="2" />
<text  x="1060.46" y="351.5" ></text>
</g>
<g >
<title>free_unref_page_prepare.part.69 (30,303,030 samples, 0.14%)</title><rect x="665.2" y="453" width="1.6" height="15.0" fill="rgb(230,131,47)" rx="2" ry="2" />
<text  x="668.20" y="463.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (70,707,070 samples, 0.32%)</title><rect x="267.6" y="181" width="3.7" height="15.0" fill="rgb(215,80,52)" rx="2" ry="2" />
<text  x="270.59" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;pollfd const*, std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt; &gt;::operator++ (20,202,020 samples, 0.09%)</title><rect x="1082.6" y="421" width="1.1" height="15.0" fill="rgb(218,73,26)" rx="2" ry="2" />
<text  x="1085.58" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::size (10,101,010 samples, 0.05%)</title><rect x="1055.3" y="293" width="0.6" height="15.0" fill="rgb(238,219,3)" rx="2" ry="2" />
<text  x="1058.33" y="303.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (10,101,010 samples, 0.05%)</title><rect x="183.2" y="549" width="0.5" height="15.0" fill="rgb(224,82,37)" rx="2" ry="2" />
<text  x="186.15" y="559.5" ></text>
</g>
<g >
<title>loopback_xmit (131,313,130 samples, 0.59%)</title><rect x="248.4" y="261" width="6.9" height="15.0" fill="rgb(214,86,30)" rx="2" ry="2" />
<text  x="251.35" y="271.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (6,545,454,480 samples, 29.35%)</title><rect x="216.3" y="405" width="346.3" height="15.0" fill="rgb(236,57,54)" rx="2" ry="2" />
<text  x="219.29" y="415.5" >tcp_sendmsg_locked</text>
</g>
<g >
<title>winterfell::EventLoop::doPendingFunctors (272,727,270 samples, 1.22%)</title><rect x="1058.5" y="453" width="14.5" height="15.0" fill="rgb(220,196,10)" rx="2" ry="2" />
<text  x="1061.53" y="463.5" ></text>
</g>
<g >
<title>clnttcp_create (10,101,010 samples, 0.05%)</title><rect x="10.0" y="533" width="0.5" height="15.0" fill="rgb(248,121,52)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>winterfell::EventLoop::loop (4,383,838,340 samples, 19.66%)</title><rect x="957.5" y="469" width="232.0" height="15.0" fill="rgb(221,109,40)" rx="2" ry="2" />
<text  x="960.53" y="479.5" >winterfell::EventLoop::loop</text>
</g>
<g >
<title>skb_copy_datagram_iter (90,909,090 samples, 0.41%)</title><rect x="39.9" y="373" width="4.8" height="15.0" fill="rgb(205,151,45)" rx="2" ry="2" />
<text  x="42.93" y="383.5" ></text>
</g>
<g >
<title>ipv4_mtu (10,101,010 samples, 0.05%)</title><rect x="435.4" y="293" width="0.5" height="15.0" fill="rgb(248,65,45)" rx="2" ry="2" />
<text  x="438.40" y="303.5" ></text>
</g>
<g >
<title>ip_rcv_finish (40,404,040 samples, 0.18%)</title><rect x="429.0" y="165" width="2.1" height="15.0" fill="rgb(211,96,0)" rx="2" ry="2" />
<text  x="431.99" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;winterfell::Channel, std::default_delete&lt;winterfell::Channel&gt; &gt;::get (50,505,050 samples, 0.23%)</title><rect x="1021.1" y="229" width="2.7" height="15.0" fill="rgb(222,140,23)" rx="2" ry="2" />
<text  x="1024.12" y="239.5" ></text>
</g>
<g >
<title>_copy_from_user (10,101,010 samples, 0.05%)</title><rect x="635.3" y="485" width="0.5" height="15.0" fill="rgb(220,34,46)" rx="2" ry="2" />
<text  x="638.27" y="495.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="44.2" y="293" width="0.5" height="15.0" fill="rgb(237,142,49)" rx="2" ry="2" />
<text  x="47.20" y="303.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.05%)</title><rect x="25.5" y="453" width="0.5" height="15.0" fill="rgb(242,152,51)" rx="2" ry="2" />
<text  x="28.50" y="463.5" ></text>
</g>
<g >
<title>fsnotify (10,101,010 samples, 0.05%)</title><rect x="209.3" y="469" width="0.6" height="15.0" fill="rgb(221,73,42)" rx="2" ry="2" />
<text  x="212.34" y="479.5" ></text>
</g>
<g >
<title>winterfell::Singleton&lt;winterfell::Logger&gt;::GetInstance (30,303,030 samples, 0.14%)</title><rect x="1105.0" y="437" width="1.6" height="15.0" fill="rgb(224,87,47)" rx="2" ry="2" />
<text  x="1108.03" y="447.5" ></text>
</g>
<g >
<title>winterfell::PollPoller::fillActiveChannels (484,848,480 samples, 2.17%)</title><rect x="1079.4" y="437" width="25.6" height="15.0" fill="rgb(249,218,15)" rx="2" ry="2" />
<text  x="1082.38" y="447.5" >w..</text>
</g>
<g >
<title>__netif_receive_skb_one_core (3,090,909,060 samples, 13.86%)</title><rect x="267.6" y="197" width="163.5" height="15.0" fill="rgb(224,87,1)" rx="2" ry="2" />
<text  x="270.59" y="207.5" >__netif_receive_skb_o..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (1,636,363,620 samples, 7.34%)</title><rect x="969.3" y="357" width="86.6" height="15.0" fill="rgb(239,96,25)" rx="2" ry="2" />
<text  x="972.28" y="367.5" >std::__inv..</text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.05%)</title><rect x="1051.1" y="229" width="0.5" height="15.0" fill="rgb(219,124,3)" rx="2" ry="2" />
<text  x="1054.05" y="239.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (2,686,868,660 samples, 12.05%)</title><rect x="30.3" y="437" width="142.2" height="15.0" fill="rgb(246,31,38)" rx="2" ry="2" />
<text  x="33.31" y="447.5" >do_iter_readv_writev</text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="954.9" y="405" width="0.5" height="15.0" fill="rgb(206,64,6)" rx="2" ry="2" />
<text  x="957.86" y="415.5" ></text>
</g>
<g >
<title>fput_many (161,616,160 samples, 0.72%)</title><rect x="637.9" y="485" width="8.6" height="15.0" fill="rgb(220,20,52)" rx="2" ry="2" />
<text  x="640.94" y="495.5" ></text>
</g>
<g >
<title>kfree (20,202,020 samples, 0.09%)</title><rect x="182.1" y="453" width="1.1" height="15.0" fill="rgb(251,141,54)" rx="2" ry="2" />
<text  x="185.08" y="463.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, winterfell::Poller*, std::default_delete&lt;winterfell::Poller&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="961.3" y="389" width="0.5" height="15.0" fill="rgb(228,211,36)" rx="2" ry="2" />
<text  x="964.27" y="399.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (10,101,010 samples, 0.05%)</title><rect x="635.3" y="469" width="0.5" height="15.0" fill="rgb(227,2,40)" rx="2" ry="2" />
<text  x="638.27" y="479.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="1068.7" y="341" width="0.5" height="15.0" fill="rgb(220,27,12)" rx="2" ry="2" />
<text  x="1071.69" y="351.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;void  (30,303,030 samples, 0.14%)</title><rect x="184.2" y="549" width="1.6" height="15.0" fill="rgb(225,129,12)" rx="2" ry="2" />
<text  x="187.22" y="559.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (10,101,010 samples, 0.05%)</title><rect x="426.3" y="69" width="0.5" height="15.0" fill="rgb(227,95,42)" rx="2" ry="2" />
<text  x="429.31" y="79.5" ></text>
</g>
<g >
<title>clntudp_freeres (10,101,010 samples, 0.05%)</title><rect x="10.5" y="533" width="0.6" height="15.0" fill="rgb(230,90,52)" rx="2" ry="2" />
<text  x="13.53" y="543.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (2,939,393,910 samples, 13.18%)</title><rect x="272.9" y="149" width="155.6" height="15.0" fill="rgb(246,104,33)" rx="2" ry="2" />
<text  x="275.93" y="159.5" >ip_local_deliver_fi..</text>
</g>
<g >
<title>policy_nodemask (10,101,010 samples, 0.05%)</title><rect x="841.6" y="405" width="0.5" height="15.0" fill="rgb(230,16,22)" rx="2" ry="2" />
<text  x="844.56" y="415.5" ></text>
</g>
<g >
<title>refcount_sub_and_test_checked (10,101,010 samples, 0.05%)</title><rect x="282.0" y="101" width="0.6" height="15.0" fill="rgb(230,120,37)" rx="2" ry="2" />
<text  x="285.02" y="111.5" ></text>
</g>
<g >
<title>tcp_recvmsg (2,545,454,520 samples, 11.41%)</title><rect x="32.4" y="389" width="134.7" height="15.0" fill="rgb(227,31,6)" rx="2" ry="2" />
<text  x="35.45" y="399.5" >tcp_recvmsg</text>
</g>
<g >
<title>vmware_sched_clock (2,272,727,250 samples, 10.19%)</title><rect x="46.9" y="325" width="120.2" height="15.0" fill="rgb(221,33,17)" rx="2" ry="2" />
<text  x="49.88" y="335.5" >vmware_sched_c..</text>
</g>
<g >
<title>operator new@plt (10,101,010 samples, 0.05%)</title><rect x="982.6" y="261" width="0.6" height="15.0" fill="rgb(207,172,50)" rx="2" ry="2" />
<text  x="985.64" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (50,505,050 samples, 0.23%)</title><rect x="1069.2" y="389" width="2.7" height="15.0" fill="rgb(231,106,26)" rx="2" ry="2" />
<text  x="1072.22" y="399.5" ></text>
</g>
<g >
<title>tcp_data_ready (10,101,010 samples, 0.05%)</title><rect x="425.8" y="69" width="0.5" height="15.0" fill="rgb(243,59,30)" rx="2" ry="2" />
<text  x="428.78" y="79.5" ></text>
</g>
<g >
<title>__fget_light (20,202,020 samples, 0.09%)</title><rect x="205.6" y="469" width="1.1" height="15.0" fill="rgb(245,62,32)" rx="2" ry="2" />
<text  x="208.60" y="479.5" ></text>
</g>
<g >
<title>vmware_sched_clock (2,121,212,100 samples, 9.51%)</title><rect x="284.2" y="53" width="112.2" height="15.0" fill="rgb(235,129,10)" rx="2" ry="2" />
<text  x="287.16" y="63.5" >vmware_sched_..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="1044.1" y="149" width="0.5" height="15.0" fill="rgb(245,147,41)" rx="2" ry="2" />
<text  x="1047.10" y="159.5" ></text>
</g>
<g >
<title>aa_file_perm (20,202,020 samples, 0.09%)</title><rect x="177.8" y="405" width="1.1" height="15.0" fill="rgb(206,85,2)" rx="2" ry="2" />
<text  x="180.81" y="415.5" ></text>
</g>
<g >
<title>tcp_rcv_space_adjust (2,282,828,260 samples, 10.24%)</title><rect x="46.3" y="373" width="120.8" height="15.0" fill="rgb(244,205,46)" rx="2" ry="2" />
<text  x="49.34" y="383.5" >tcp_rcv_space_a..</text>
</g>
<g >
<title>___slab_alloc (30,303,030 samples, 0.14%)</title><rect x="554.0" y="309" width="1.6" height="15.0" fill="rgb(245,23,11)" rx="2" ry="2" />
<text  x="557.04" y="319.5" ></text>
</g>
<g >
<title>kfree_skbmem (10,101,010 samples, 0.05%)</title><rect x="37.3" y="373" width="0.5" height="15.0" fill="rgb(252,59,41)" rx="2" ry="2" />
<text  x="40.26" y="383.5" ></text>
</g>
<g >
<title>__check_heap_object (10,101,010 samples, 0.05%)</title><rect x="41.0" y="341" width="0.5" height="15.0" fill="rgb(247,161,30)" rx="2" ry="2" />
<text  x="44.00" y="351.5" ></text>
</g>
<g >
<title>__fsnotify_parent (20,202,020 samples, 0.09%)</title><rect x="29.2" y="437" width="1.1" height="15.0" fill="rgb(246,33,38)" rx="2" ry="2" />
<text  x="32.24" y="447.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, winterfell::TcpConnection*&gt; (20,202,020 samples, 0.09%)</title><rect x="1056.9" y="357" width="1.1" height="15.0" fill="rgb(246,2,42)" rx="2" ry="2" />
<text  x="1059.93" y="367.5" ></text>
</g>
<g >
<title>__validuser2_sa (20,202,020 samples, 0.09%)</title><rect x="959.1" y="453" width="1.1" height="15.0" fill="rgb(253,20,31)" rx="2" ry="2" />
<text  x="962.13" y="463.5" ></text>
</g>
<g >
<title>security_socket_sendmsg (10,101,010 samples, 0.05%)</title><rect x="212.0" y="421" width="0.5" height="15.0" fill="rgb(244,104,33)" rx="2" ry="2" />
<text  x="215.01" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;::_M_ptr (10,101,010 samples, 0.05%)</title><rect x="1095.9" y="357" width="0.6" height="15.0" fill="rgb(244,44,40)" rx="2" ry="2" />
<text  x="1098.94" y="367.5" ></text>
</g>
<g >
<title>kfree (10,101,010 samples, 0.05%)</title><rect x="646.5" y="485" width="0.5" height="15.0" fill="rgb(234,107,43)" rx="2" ry="2" />
<text  x="649.49" y="495.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (1,646,464,630 samples, 7.38%)</title><rect x="969.3" y="373" width="87.1" height="15.0" fill="rgb(243,52,38)" rx="2" ry="2" />
<text  x="972.28" y="383.5" >std::__inv..</text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.05%)</title><rect x="742.2" y="405" width="0.5" height="15.0" fill="rgb(250,189,0)" rx="2" ry="2" />
<text  x="745.16" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7,202,020,130 samples, 32.29%)</title><rect x="574.3" y="549" width="381.1" height="15.0" fill="rgb(231,115,39)" rx="2" ry="2" />
<text  x="577.35" y="559.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>exit_to_usermode_loop (50,505,050 samples, 0.23%)</title><rect x="201.3" y="501" width="2.7" height="15.0" fill="rgb(213,187,28)" rx="2" ry="2" />
<text  x="204.32" y="511.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="166.6" y="293" width="0.5" height="15.0" fill="rgb(240,69,37)" rx="2" ry="2" />
<text  x="169.59" y="303.5" ></text>
</g>
<g >
<title>write (40,404,040 samples, 0.18%)</title><rect x="1044.6" y="261" width="2.2" height="15.0" fill="rgb(234,116,21)" rx="2" ry="2" />
<text  x="1047.64" y="271.5" ></text>
</g>
<g >
<title>write (7,171,717,100 samples, 32.16%)</title><rect x="185.8" y="549" width="379.5" height="15.0" fill="rgb(216,47,6)" rx="2" ry="2" />
<text  x="188.82" y="559.5" >write</text>
</g>
<g >
<title>free_unref_page (50,505,050 samples, 0.23%)</title><rect x="664.1" y="469" width="2.7" height="15.0" fill="rgb(246,17,33)" rx="2" ry="2" />
<text  x="667.13" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;void  (1,767,676,750 samples, 7.93%)</title><rect x="965.0" y="437" width="93.5" height="15.0" fill="rgb(234,107,26)" rx="2" ry="2" />
<text  x="968.01" y="447.5" >std::functi..</text>
</g>
<g >
<title>__slab_alloc (20,202,020 samples, 0.09%)</title><rect x="558.3" y="341" width="1.1" height="15.0" fill="rgb(233,140,50)" rx="2" ry="2" />
<text  x="561.32" y="351.5" ></text>
</g>
<g >
<title>tcp_v4_send_check (10,101,010 samples, 0.05%)</title><rect x="439.1" y="341" width="0.6" height="15.0" fill="rgb(240,20,39)" rx="2" ry="2" />
<text  x="442.14" y="351.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, winterfell::Channel*, std::default_delete&lt;winterfell::Channel&gt; &gt; (20,202,020 samples, 0.09%)</title><rect x="1050.5" y="277" width="1.1" height="15.0" fill="rgb(226,14,23)" rx="2" ry="2" />
<text  x="1053.52" y="287.5" ></text>
</g>
<g >
<title>tcp_newly_delivered (30,303,030 samples, 0.14%)</title><rect x="414.0" y="69" width="1.6" height="15.0" fill="rgb(231,16,22)" rx="2" ry="2" />
<text  x="417.02" y="79.5" ></text>
</g>
<g >
<title>skb_csum_hwoffload_help (10,101,010 samples, 0.05%)</title><rect x="256.4" y="261" width="0.5" height="15.0" fill="rgb(208,204,23)" rx="2" ry="2" />
<text  x="259.37" y="271.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (20,202,020 samples, 0.09%)</title><rect x="988.5" y="277" width="1.1" height="15.0" fill="rgb(209,137,36)" rx="2" ry="2" />
<text  x="991.52" y="287.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (181,818,180 samples, 0.82%)</title><rect x="549.8" y="389" width="9.6" height="15.0" fill="rgb(211,87,18)" rx="2" ry="2" />
<text  x="552.76" y="399.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="1068.7" y="389" width="0.5" height="15.0" fill="rgb(212,0,4)" rx="2" ry="2" />
<text  x="1071.69" y="399.5" ></text>
</g>
<g >
<title>winterfell::Buffer::retrieveAll (10,101,010 samples, 0.05%)</title><rect x="991.7" y="277" width="0.6" height="15.0" fill="rgb(229,32,24)" rx="2" ry="2" />
<text  x="994.73" y="287.5" ></text>
</g>
<g >
<title>ip_finish_output (20,202,020 samples, 0.09%)</title><rect x="239.8" y="309" width="1.1" height="15.0" fill="rgb(242,117,14)" rx="2" ry="2" />
<text  x="242.80" y="319.5" ></text>
</g>
<g >
<title>tcp_stream_memory_free (282,828,280 samples, 1.27%)</title><rect x="852.2" y="453" width="15.0" height="15.0" fill="rgb(214,111,3)" rx="2" ry="2" />
<text  x="855.25" y="463.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (10,101,010 samples, 0.05%)</title><rect x="666.8" y="453" width="0.5" height="15.0" fill="rgb(205,153,24)" rx="2" ry="2" />
<text  x="669.80" y="463.5" ></text>
</g>
<g >
<title>winterfell::EventLoop::isInLoopThread (393,939,390 samples, 1.77%)</title><rect x="997.1" y="261" width="20.8" height="15.0" fill="rgb(217,227,2)" rx="2" ry="2" />
<text  x="1000.07" y="271.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (80,808,080 samples, 0.36%)</title><rect x="421.5" y="53" width="4.3" height="15.0" fill="rgb(239,85,22)" rx="2" ry="2" />
<text  x="424.50" y="63.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (3,272,727,240 samples, 14.67%)</title><rect x="258.0" y="293" width="173.1" height="15.0" fill="rgb(205,8,37)" rx="2" ry="2" />
<text  x="260.97" y="303.5" >__local_bh_enable_ip</text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="742.2" y="421" width="0.5" height="15.0" fill="rgb(236,167,28)" rx="2" ry="2" />
<text  x="745.16" y="431.5" ></text>
</g>
<g >
<title>release_sock (20,202,020 samples, 0.09%)</title><rect x="215.2" y="405" width="1.1" height="15.0" fill="rgb(223,46,40)" rx="2" ry="2" />
<text  x="218.22" y="415.5" ></text>
</g>
<g >
<title>kfree (10,101,010 samples, 0.05%)</title><rect x="405.5" y="53" width="0.5" height="15.0" fill="rgb(210,89,51)" rx="2" ry="2" />
<text  x="408.47" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;winterfell::Channel*, std::allocator&lt;winterfell::Channel*&gt; &gt;::clear (30,303,030 samples, 0.14%)</title><rect x="962.3" y="453" width="1.6" height="15.0" fill="rgb(222,96,29)" rx="2" ry="2" />
<text  x="965.34" y="463.5" ></text>
</g>
<g >
<title>[libc-2.28.so] (30,303,030 samples, 0.14%)</title><rect x="184.2" y="533" width="1.6" height="15.0" fill="rgb(244,228,14)" rx="2" ry="2" />
<text  x="187.22" y="543.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="25.5" y="437" width="0.5" height="15.0" fill="rgb(241,155,54)" rx="2" ry="2" />
<text  x="28.50" y="447.5" ></text>
</g>
<g >
<title>copyout (40,404,040 samples, 0.18%)</title><rect x="42.6" y="341" width="2.1" height="15.0" fill="rgb(246,153,13)" rx="2" ry="2" />
<text  x="45.60" y="351.5" ></text>
</g>
<g >
<title>__schedule (10,101,010 samples, 0.05%)</title><rect x="1063.3" y="341" width="0.6" height="15.0" fill="rgb(226,5,36)" rx="2" ry="2" />
<text  x="1066.34" y="351.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (6,121,212,060 samples, 27.45%)</title><rect x="223.2" y="389" width="323.9" height="15.0" fill="rgb(248,226,43)" rx="2" ry="2" />
<text  x="226.23" y="399.5" >__tcp_push_pending_frames</text>
</g>
<g >
<title>echo_server (22,303,030,080 samples, 100.00%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(224,133,24)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >echo_server</text>
</g>
<g >
<title>__schedule (50,505,050 samples, 0.23%)</title><rect x="201.3" y="469" width="2.7" height="15.0" fill="rgb(218,87,35)" rx="2" ry="2" />
<text  x="204.32" y="479.5" ></text>
</g>
<g >
<title>sk_free (20,202,020 samples, 0.09%)</title><rect x="253.2" y="245" width="1.0" height="15.0" fill="rgb(215,225,48)" rx="2" ry="2" />
<text  x="256.16" y="255.5" ></text>
</g>
<g >
<title>_cond_resched (10,101,010 samples, 0.05%)</title><rect x="633.7" y="469" width="0.5" height="15.0" fill="rgb(230,82,2)" rx="2" ry="2" />
<text  x="636.67" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,090,909,060 samples, 13.86%)</title><rect x="19.6" y="501" width="163.6" height="15.0" fill="rgb(213,67,45)" rx="2" ry="2" />
<text  x="22.62" y="511.5" >do_syscall_64</text>
</g>
<g >
<title>copyin (30,303,030 samples, 0.14%)</title><rect x="548.2" y="373" width="1.6" height="15.0" fill="rgb(248,56,40)" rx="2" ry="2" />
<text  x="551.16" y="383.5" ></text>
</g>
<g >
<title>__slab_free (10,101,010 samples, 0.05%)</title><rect x="410.8" y="53" width="0.5" height="15.0" fill="rgb(254,59,42)" rx="2" ry="2" />
<text  x="413.82" y="63.5" ></text>
</g>
<g >
<title>operator delete@plt (10,101,010 samples, 0.05%)</title><rect x="1047.3" y="293" width="0.5" height="15.0" fill="rgb(205,147,24)" rx="2" ry="2" />
<text  x="1050.31" y="303.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (10,101,010 samples, 0.05%)</title><rect x="1072.4" y="421" width="0.6" height="15.0" fill="rgb(214,122,46)" rx="2" ry="2" />
<text  x="1075.43" y="431.5" ></text>
</g>
<g >
<title>tcp_stream_memory_free (10,101,010 samples, 0.05%)</title><rect x="562.1" y="389" width="0.5" height="15.0" fill="rgb(220,85,37)" rx="2" ry="2" />
<text  x="565.06" y="399.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;void  (50,505,050 samples, 0.23%)</title><rect x="981.6" y="277" width="2.6" height="15.0" fill="rgb(237,175,38)" rx="2" ry="2" />
<text  x="984.58" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;pollfd const*, std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt; &gt;::__normal_iterator (30,303,030 samples, 0.14%)</title><rect x="1098.1" y="405" width="1.6" height="15.0" fill="rgb(242,22,25)" rx="2" ry="2" />
<text  x="1101.08" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::_M_lower_bound (161,616,160 samples, 0.72%)</title><rect x="1086.3" y="389" width="8.6" height="15.0" fill="rgb(231,70,25)" rx="2" ry="2" />
<text  x="1089.32" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;::_M_ptr (10,101,010 samples, 0.05%)</title><rect x="1087.9" y="341" width="0.6" height="15.0" fill="rgb(218,100,34)" rx="2" ry="2" />
<text  x="1090.93" y="351.5" ></text>
</g>
<g >
<title>sock_def_readable (111,111,110 samples, 0.50%)</title><rect x="419.9" y="69" width="5.9" height="15.0" fill="rgb(212,175,29)" rx="2" ry="2" />
<text  x="422.90" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::_S_key (30,303,030 samples, 0.14%)</title><rect x="1094.9" y="389" width="1.6" height="15.0" fill="rgb(246,79,31)" rx="2" ry="2" />
<text  x="1097.87" y="399.5" ></text>
</g>
<g >
<title>__virt_addr_valid (20,202,020 samples, 0.09%)</title><rect x="222.2" y="373" width="1.0" height="15.0" fill="rgb(214,128,9)" rx="2" ry="2" />
<text  x="225.16" y="383.5" ></text>
</g>
<g >
<title>tcp_write_xmit (6,101,010,040 samples, 27.36%)</title><rect x="224.3" y="373" width="322.8" height="15.0" fill="rgb(244,143,2)" rx="2" ry="2" />
<text  x="227.30" y="383.5" >tcp_write_xmit</text>
</g>
<g >
<title>[unknown] (3,272,727,240 samples, 14.67%)</title><rect x="10.0" y="549" width="173.2" height="15.0" fill="rgb(246,13,24)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >[unknown]</text>
</g>
<g >
<title>inet_recvmsg (2,575,757,550 samples, 11.55%)</title><rect x="30.8" y="405" width="136.3" height="15.0" fill="rgb(253,172,32)" rx="2" ry="2" />
<text  x="33.84" y="415.5" >inet_recvmsg</text>
</g>
<g >
<title>winterfell::Thread::runInThread (4,414,141,370 samples, 19.79%)</title><rect x="956.5" y="533" width="233.5" height="15.0" fill="rgb(238,66,15)" rx="2" ry="2" />
<text  x="959.46" y="543.5" >winterfell::Thread::runInThread</text>
</g>
<g >
<title>apparmor_socket_recvmsg (20,202,020 samples, 0.09%)</title><rect x="171.4" y="373" width="1.1" height="15.0" fill="rgb(241,88,5)" rx="2" ry="2" />
<text  x="174.39" y="383.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.05%)</title><rect x="742.2" y="357" width="0.5" height="15.0" fill="rgb(221,149,35)" rx="2" ry="2" />
<text  x="745.16" y="367.5" ></text>
</g>
<g >
<title>mod_timer (50,505,050 samples, 0.23%)</title><rect x="396.9" y="69" width="2.7" height="15.0" fill="rgb(214,178,42)" rx="2" ry="2" />
<text  x="399.92" y="79.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (70,707,070 samples, 0.32%)</title><rect x="422.0" y="37" width="3.8" height="15.0" fill="rgb(239,20,17)" rx="2" ry="2" />
<text  x="425.04" y="47.5" ></text>
</g>
<g >
<title>winterfell::Channel::fd (80,808,080 samples, 0.36%)</title><rect x="1100.8" y="421" width="4.2" height="15.0" fill="rgb(207,132,13)" rx="2" ry="2" />
<text  x="1103.75" y="431.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (10,101,010 samples, 0.05%)</title><rect x="1063.3" y="373" width="0.6" height="15.0" fill="rgb(227,82,53)" rx="2" ry="2" />
<text  x="1066.34" y="383.5" ></text>
</g>
<g >
<title>do_sys_poll (5,505,050,450 samples, 24.68%)</title><rect x="577.6" y="501" width="291.2" height="15.0" fill="rgb(223,135,8)" rx="2" ry="2" />
<text  x="580.55" y="511.5" >do_sys_poll</text>
</g>
<g >
<title>__copy_skb_header (10,101,010 samples, 0.05%)</title><rect x="436.5" y="325" width="0.5" height="15.0" fill="rgb(248,80,15)" rx="2" ry="2" />
<text  x="439.47" y="335.5" ></text>
</g>
<g >
<title>netif_skb_features (10,101,010 samples, 0.05%)</title><rect x="255.8" y="261" width="0.6" height="15.0" fill="rgb(233,155,24)" rx="2" ry="2" />
<text  x="258.83" y="271.5" ></text>
</g>
<g >
<title>free_pcp_prepare (10,101,010 samples, 0.05%)</title><rect x="664.7" y="453" width="0.5" height="15.0" fill="rgb(208,111,10)" rx="2" ry="2" />
<text  x="667.66" y="463.5" ></text>
</g>
<g >
<title>tcp_sendmsg (6,616,161,550 samples, 29.66%)</title><rect x="212.5" y="421" width="350.1" height="15.0" fill="rgb(234,30,24)" rx="2" ry="2" />
<text  x="215.55" y="431.5" >tcp_sendmsg</text>
</g>
<g >
<title>gettimeofday (10,101,010 samples, 0.05%)</title><rect x="1077.8" y="437" width="0.5" height="15.0" fill="rgb(245,122,10)" rx="2" ry="2" />
<text  x="1080.77" y="447.5" ></text>
</g>
<g >
<title>__kmalloc (70,707,070 samples, 0.32%)</title><rect x="631.5" y="485" width="3.8" height="15.0" fill="rgb(205,137,38)" rx="2" ry="2" />
<text  x="634.53" y="495.5" ></text>
</g>
<g >
<title>finish_task_switch (80,808,080 samples, 0.36%)</title><rect x="667.3" y="421" width="4.3" height="15.0" fill="rgb(245,49,31)" rx="2" ry="2" />
<text  x="670.34" y="431.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="25.5" y="485" width="0.5" height="15.0" fill="rgb(229,51,51)" rx="2" ry="2" />
<text  x="28.50" y="495.5" ></text>
</g>
<g >
<title>_cond_resched (10,101,010 samples, 0.05%)</title><rect x="212.0" y="389" width="0.5" height="15.0" fill="rgb(254,151,50)" rx="2" ry="2" />
<text  x="215.01" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, winterfell::Channel*, std::default_delete&lt;winterfell::Channel&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="1023.3" y="213" width="0.5" height="15.0" fill="rgb(228,87,13)" rx="2" ry="2" />
<text  x="1026.26" y="223.5" ></text>
</g>
<g >
<title>read_tsc (1,313,131,300 samples, 5.89%)</title><rect x="673.2" y="453" width="69.5" height="15.0" fill="rgb(217,127,13)" rx="2" ry="2" />
<text  x="676.22" y="463.5" >read_tsc</text>
</g>
<g >
<title>do_syscall_64 (7,202,020,130 samples, 32.29%)</title><rect x="574.3" y="533" width="381.1" height="15.0" fill="rgb(216,144,20)" rx="2" ry="2" />
<text  x="577.35" y="543.5" >do_syscall_64</text>
</g>
<g >
<title>vmware_sched_clock (1,919,191,900 samples, 8.61%)</title><rect x="439.7" y="325" width="101.5" height="15.0" fill="rgb(221,141,9)" rx="2" ry="2" />
<text  x="442.67" y="335.5" >vmware_sched..</text>
</g>
<g >
<title>winterfell::startThread (4,414,141,370 samples, 19.79%)</title><rect x="956.5" y="549" width="233.5" height="15.0" fill="rgb(205,189,48)" rx="2" ry="2" />
<text  x="959.46" y="559.5" >winterfell::startThread</text>
</g>
<g >
<title>_copy_to_iter (40,404,040 samples, 0.18%)</title><rect x="42.6" y="357" width="2.1" height="15.0" fill="rgb(214,14,54)" rx="2" ry="2" />
<text  x="45.60" y="367.5" ></text>
</g>
<g >
<title>onMessage (10,101,010 samples, 0.05%)</title><rect x="977.8" y="309" width="0.6" height="15.0" fill="rgb(253,93,7)" rx="2" ry="2" />
<text  x="980.84" y="319.5" ></text>
</g>
<g >
<title>std::forward&lt;void  (10,101,010 samples, 0.05%)</title><rect x="1056.4" y="373" width="0.5" height="15.0" fill="rgb(235,126,37)" rx="2" ry="2" />
<text  x="1059.39" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;pollfd const*, std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt; &gt;::base (10,101,010 samples, 0.05%)</title><rect x="1084.2" y="405" width="0.5" height="15.0" fill="rgb(223,119,30)" rx="2" ry="2" />
<text  x="1087.18" y="415.5" ></text>
</g>
<g >
<title>security_sock_rcv_skb (10,101,010 samples, 0.05%)</title><rect x="281.0" y="101" width="0.5" height="15.0" fill="rgb(253,105,19)" rx="2" ry="2" />
<text  x="283.95" y="111.5" ></text>
</g>
<g >
<title>new_sync_write (6,666,666,600 samples, 29.89%)</title><rect x="209.9" y="469" width="352.7" height="15.0" fill="rgb(218,143,43)" rx="2" ry="2" />
<text  x="212.87" y="479.5" >new_sync_write</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (10,101,010 samples, 0.05%)</title><rect x="993.3" y="261" width="0.6" height="15.0" fill="rgb(252,47,3)" rx="2" ry="2" />
<text  x="996.33" y="271.5" ></text>
</g>
<g >
<title>tcp_data_queue (181,818,180 samples, 0.82%)</title><rect x="417.2" y="85" width="9.6" height="15.0" fill="rgb(227,119,44)" rx="2" ry="2" />
<text  x="420.23" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::function&lt;void  (10,101,010 samples, 0.05%)</title><rect x="1059.6" y="437" width="0.5" height="15.0" fill="rgb(216,140,22)" rx="2" ry="2" />
<text  x="1062.60" y="447.5" ></text>
</g>
<g >
<title>refcount_inc_not_zero_checked (10,101,010 samples, 0.05%)</title><rect x="280.4" y="101" width="0.6" height="15.0" fill="rgb(215,150,14)" rx="2" ry="2" />
<text  x="283.42" y="111.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (70,707,070 samples, 0.32%)</title><rect x="836.7" y="421" width="3.8" height="15.0" fill="rgb(219,87,51)" rx="2" ry="2" />
<text  x="839.75" y="431.5" ></text>
</g>
<g >
<title>__fdget_pos (30,303,030 samples, 0.14%)</title><rect x="205.1" y="485" width="1.6" height="15.0" fill="rgb(209,41,49)" rx="2" ry="2" />
<text  x="208.06" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;winterfell::Channel, std::default_delete&lt;winterfell::Channel&gt; &gt;::operator (60,606,060 samples, 0.27%)</title><rect x="1020.6" y="245" width="3.2" height="15.0" fill="rgb(242,34,7)" rx="2" ry="2" />
<text  x="1023.59" y="255.5" ></text>
</g>
<g >
<title>all (22,303,030,080 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(207,222,22)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>security_file_permission (40,404,040 samples, 0.18%)</title><rect x="563.1" y="469" width="2.2" height="15.0" fill="rgb(224,97,27)" rx="2" ry="2" />
<text  x="566.12" y="479.5" ></text>
</g>
<g >
<title>winterfell::Channel::handleEvent (1,787,878,770 samples, 8.02%)</title><rect x="963.9" y="453" width="94.6" height="15.0" fill="rgb(210,108,38)" rx="2" ry="2" />
<text  x="966.94" y="463.5" >winterfell:..</text>
</g>
<g >
<title>rw_copy_check_uvector (50,505,050 samples, 0.23%)</title><rect x="179.4" y="437" width="2.7" height="15.0" fill="rgb(247,119,16)" rx="2" ry="2" />
<text  x="182.41" y="447.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1,919,191,900 samples, 8.61%)</title><rect x="439.7" y="357" width="101.5" height="15.0" fill="rgb(230,27,17)" rx="2" ry="2" />
<text  x="442.67" y="367.5" >sched_clock_..</text>
</g>
<g >
<title>ip_rcv_finish_core.isra.18 (40,404,040 samples, 0.18%)</title><rect x="429.0" y="149" width="2.1" height="15.0" fill="rgb(249,50,39)" rx="2" ry="2" />
<text  x="431.99" y="159.5" ></text>
</g>
<g >
<title>__check_object_size (10,101,010 samples, 0.05%)</title><rect x="179.9" y="421" width="0.6" height="15.0" fill="rgb(207,40,33)" rx="2" ry="2" />
<text  x="182.95" y="431.5" ></text>
</g>
<g >
<title>tcp_cleanup_rbuf (30,303,030 samples, 0.14%)</title><rect x="44.7" y="373" width="1.6" height="15.0" fill="rgb(216,51,16)" rx="2" ry="2" />
<text  x="47.74" y="383.5" ></text>
</g>
<g >
<title>iov_iter_init (10,101,010 samples, 0.05%)</title><rect x="209.9" y="453" width="0.5" height="15.0" fill="rgb(214,93,4)" rx="2" ry="2" />
<text  x="212.87" y="463.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="1051.1" y="213" width="0.5" height="15.0" fill="rgb(227,18,5)" rx="2" ry="2" />
<text  x="1054.05" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_write (10,101,010 samples, 0.05%)</title><rect x="200.8" y="501" width="0.5" height="15.0" fill="rgb(252,227,4)" rx="2" ry="2" />
<text  x="203.79" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;::operator (10,101,010 samples, 0.05%)</title><rect x="1078.3" y="437" width="0.5" height="15.0" fill="rgb(235,210,52)" rx="2" ry="2" />
<text  x="1081.31" y="447.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (20,202,020 samples, 0.09%)</title><rect x="548.7" y="357" width="1.1" height="15.0" fill="rgb(220,6,6)" rx="2" ry="2" />
<text  x="551.70" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::begin (10,101,010 samples, 0.05%)</title><rect x="1054.3" y="293" width="0.5" height="15.0" fill="rgb(235,105,36)" rx="2" ry="2" />
<text  x="1057.26" y="303.5" ></text>
</g>
<g >
<title>tcp_rcv_established (2,757,575,730 samples, 12.36%)</title><rect x="282.6" y="101" width="145.9" height="15.0" fill="rgb(247,81,11)" rx="2" ry="2" />
<text  x="285.55" y="111.5" >tcp_rcv_established</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::find (242,424,240 samples, 1.09%)</title><rect x="1084.7" y="405" width="12.8" height="15.0" fill="rgb(249,85,10)" rx="2" ry="2" />
<text  x="1087.72" y="415.5" ></text>
</g>
<g >
<title>tcp_rearm_rto (20,202,020 samples, 0.09%)</title><rect x="545.0" y="341" width="1.0" height="15.0" fill="rgb(226,101,34)" rx="2" ry="2" />
<text  x="547.95" y="351.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (90,909,090 samples, 0.41%)</title><rect x="550.8" y="341" width="4.8" height="15.0" fill="rgb(213,139,33)" rx="2" ry="2" />
<text  x="553.83" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6,999,999,930 samples, 31.39%)</title><rect x="194.9" y="533" width="370.4" height="15.0" fill="rgb(246,30,19)" rx="2" ry="2" />
<text  x="197.91" y="543.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>skb_release_all (40,404,040 samples, 0.18%)</title><rect x="406.5" y="53" width="2.2" height="15.0" fill="rgb(218,3,54)" rx="2" ry="2" />
<text  x="409.54" y="63.5" ></text>
</g>
<g >
<title>winterfell::Buffer::retrieveAsString[abi:cxx11] (10,101,010 samples, 0.05%)</title><rect x="992.3" y="277" width="0.5" height="15.0" fill="rgb(214,77,31)" rx="2" ry="2" />
<text  x="995.26" y="287.5" ></text>
</g>
<g >
<title>mod_timer (30,303,030 samples, 0.14%)</title><rect x="542.8" y="325" width="1.6" height="15.0" fill="rgb(249,105,18)" rx="2" ry="2" />
<text  x="545.82" y="335.5" ></text>
</g>
<g >
<title>std::_Function_base::_M_empty (10,101,010 samples, 0.05%)</title><rect x="966.1" y="421" width="0.5" height="15.0" fill="rgb(205,82,53)" rx="2" ry="2" />
<text  x="969.08" y="431.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (3,818,181,780 samples, 17.12%)</title><rect x="233.9" y="341" width="202.0" height="15.0" fill="rgb(222,144,51)" rx="2" ry="2" />
<text  x="236.92" y="351.5" >__ip_queue_xmit</text>
</g>
<g >
<title>remove_wait_queue (10,101,010 samples, 0.05%)</title><rect x="666.8" y="469" width="0.5" height="15.0" fill="rgb(224,117,0)" rx="2" ry="2" />
<text  x="669.80" y="479.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::function&lt;void  (10,101,010 samples, 0.05%)</title><rect x="1061.2" y="389" width="0.5" height="15.0" fill="rgb(214,202,15)" rx="2" ry="2" />
<text  x="1064.20" y="399.5" ></text>
</g>
<g >
<title>finish_task_switch (50,505,050 samples, 0.23%)</title><rect x="201.3" y="453" width="2.7" height="15.0" fill="rgb(215,194,0)" rx="2" ry="2" />
<text  x="204.32" y="463.5" ></text>
</g>
<g >
<title>skb_release_head_state (10,101,010 samples, 0.05%)</title><rect x="36.2" y="341" width="0.5" height="15.0" fill="rgb(234,149,10)" rx="2" ry="2" />
<text  x="39.19" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="166.6" y="309" width="0.5" height="15.0" fill="rgb(251,103,41)" rx="2" ry="2" />
<text  x="169.59" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;winterfell::Channel*, std::allocator&lt;winterfell::Channel*&gt; &gt;::_M_erase_at_end (10,101,010 samples, 0.05%)</title><rect x="963.4" y="437" width="0.5" height="15.0" fill="rgb(230,121,36)" rx="2" ry="2" />
<text  x="966.41" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::_S_key (50,505,050 samples, 0.23%)</title><rect x="1086.9" y="373" width="2.6" height="15.0" fill="rgb(221,148,40)" rx="2" ry="2" />
<text  x="1089.86" y="383.5" ></text>
</g>
<g >
<title>winterfell::PollPoller::poll (2,121,212,100 samples, 9.51%)</title><rect x="1074.6" y="453" width="112.2" height="15.0" fill="rgb(248,134,53)" rx="2" ry="2" />
<text  x="1077.57" y="463.5" >winterfell::P..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.05%)</title><rect x="868.3" y="469" width="0.5" height="15.0" fill="rgb(216,109,40)" rx="2" ry="2" />
<text  x="871.28" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::begin (10,101,010 samples, 0.05%)</title><rect x="1078.8" y="437" width="0.6" height="15.0" fill="rgb(244,142,50)" rx="2" ry="2" />
<text  x="1081.84" y="447.5" ></text>
</g>
<g >
<title>ip_local_out (10,101,010 samples, 0.05%)</title><rect x="238.2" y="325" width="0.5" height="15.0" fill="rgb(252,119,2)" rx="2" ry="2" />
<text  x="241.20" y="335.5" ></text>
</g>
<g >
<title>fsnotify (20,202,020 samples, 0.09%)</title><rect x="172.5" y="437" width="1.0" height="15.0" fill="rgb(215,194,20)" rx="2" ry="2" />
<text  x="175.46" y="447.5" ></text>
</g>
<g >
<title>fput_many (10,101,010 samples, 0.05%)</title><rect x="28.7" y="469" width="0.5" height="15.0" fill="rgb(229,166,45)" rx="2" ry="2" />
<text  x="31.70" y="479.5" ></text>
</g>
<g >
<title>winterfell::MutexLock::lock (151,515,150 samples, 0.68%)</title><rect x="1063.9" y="421" width="8.0" height="15.0" fill="rgb(229,190,6)" rx="2" ry="2" />
<text  x="1066.88" y="431.5" ></text>
</g>
<g >
<title>__validuser2_sa (7,373,737,300 samples, 33.06%)</title><rect x="565.3" y="565" width="390.1" height="15.0" fill="rgb(243,76,49)" rx="2" ry="2" />
<text  x="568.26" y="575.5" >__validuser2_sa</text>
</g>
<g >
<title>__fdget_pos (30,303,030 samples, 0.14%)</title><rect x="26.0" y="469" width="1.6" height="15.0" fill="rgb(210,57,25)" rx="2" ry="2" />
<text  x="29.03" y="479.5" ></text>
</g>
<g >
<title>__task_pid_nr_ns (30,303,030 samples, 0.14%)</title><rect x="1016.3" y="181" width="1.6" height="15.0" fill="rgb(222,84,2)" rx="2" ry="2" />
<text  x="1019.31" y="191.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (10,101,010 samples, 0.05%)</title><rect x="964.5" y="437" width="0.5" height="15.0" fill="rgb(249,137,12)" rx="2" ry="2" />
<text  x="967.47" y="447.5" ></text>
</g>
<g >
<title>common_file_perm (40,404,040 samples, 0.18%)</title><rect x="176.7" y="421" width="2.2" height="15.0" fill="rgb(250,155,18)" rx="2" ry="2" />
<text  x="179.74" y="431.5" ></text>
</g>
<g >
<title>ip_finish_output (90,909,090 samples, 0.41%)</title><rect x="431.1" y="309" width="4.8" height="15.0" fill="rgb(222,1,41)" rx="2" ry="2" />
<text  x="434.12" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (141,414,140 samples, 0.63%)</title><rect x="1037.2" y="181" width="7.4" height="15.0" fill="rgb(214,25,48)" rx="2" ry="2" />
<text  x="1040.16" y="191.5" ></text>
</g>
<g >
<title>__fdget (10,101,010 samples, 0.05%)</title><rect x="600.5" y="485" width="0.6" height="15.0" fill="rgb(223,16,53)" rx="2" ry="2" />
<text  x="603.53" y="495.5" ></text>
</g>
<g >
<title>std::map&lt;int, winterfell::Channel*, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::find (242,424,240 samples, 1.09%)</title><rect x="1084.7" y="421" width="12.8" height="15.0" fill="rgb(247,70,25)" rx="2" ry="2" />
<text  x="1087.72" y="431.5" ></text>
</g>
<g >
<title>__schedule (10,101,010 samples, 0.05%)</title><rect x="633.7" y="437" width="0.5" height="15.0" fill="rgb(228,104,12)" rx="2" ry="2" />
<text  x="636.67" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (141,414,140 samples, 0.63%)</title><rect x="1037.2" y="197" width="7.4" height="15.0" fill="rgb(206,169,10)" rx="2" ry="2" />
<text  x="1040.16" y="207.5" ></text>
</g>
<g >
<title>ip_rcv_core.isra.19 (10,101,010 samples, 0.05%)</title><rect x="428.5" y="165" width="0.5" height="15.0" fill="rgb(245,57,21)" rx="2" ry="2" />
<text  x="431.45" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::_S_value (10,101,010 samples, 0.05%)</title><rect x="1090.1" y="373" width="0.5" height="15.0" fill="rgb(211,38,6)" rx="2" ry="2" />
<text  x="1093.06" y="383.5" ></text>
</g>
<g >
<title>_cond_resched (20,202,020 samples, 0.09%)</title><rect x="170.3" y="357" width="1.1" height="15.0" fill="rgb(252,16,13)" rx="2" ry="2" />
<text  x="173.33" y="367.5" ></text>
</g>
<g >
<title>gettimeofday (1,494,949,480 samples, 6.70%)</title><rect x="1107.7" y="421" width="79.1" height="15.0" fill="rgb(237,128,38)" rx="2" ry="2" />
<text  x="1110.70" y="431.5" >gettimeof..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="25.5" y="469" width="0.5" height="15.0" fill="rgb(237,90,4)" rx="2" ry="2" />
<text  x="28.50" y="479.5" ></text>
</g>
<g >
<title>tcp_chrono_start (10,101,010 samples, 0.05%)</title><rect x="559.4" y="373" width="0.5" height="15.0" fill="rgb(249,169,4)" rx="2" ry="2" />
<text  x="562.38" y="383.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (90,909,090 samples, 0.41%)</title><rect x="167.7" y="389" width="4.8" height="15.0" fill="rgb(251,199,53)" rx="2" ry="2" />
<text  x="170.65" y="399.5" ></text>
</g>
<g >
<title>inet_sendmsg (10,101,010 samples, 0.05%)</title><rect x="211.5" y="421" width="0.5" height="15.0" fill="rgb(212,110,49)" rx="2" ry="2" />
<text  x="214.48" y="431.5" ></text>
</g>
<g >
<title>kmalloc_slab (20,202,020 samples, 0.09%)</title><rect x="634.2" y="469" width="1.1" height="15.0" fill="rgb(219,24,49)" rx="2" ry="2" />
<text  x="637.20" y="479.5" ></text>
</g>
<g >
<title>sk_reset_timer (60,606,060 samples, 0.27%)</title><rect x="396.4" y="85" width="3.2" height="15.0" fill="rgb(215,75,20)" rx="2" ry="2" />
<text  x="399.39" y="95.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, winterfell::TcpConnection*, false&gt;::_M_head (10,101,010 samples, 0.05%)</title><rect x="1057.5" y="325" width="0.5" height="15.0" fill="rgb(224,43,45)" rx="2" ry="2" />
<text  x="1060.46" y="335.5" ></text>
</g>
<g >
<title>sched_clock_cpu (2,272,727,250 samples, 10.19%)</title><rect x="46.9" y="357" width="120.2" height="15.0" fill="rgb(229,196,53)" rx="2" ry="2" />
<text  x="49.88" y="367.5" >sched_clock_cpu</text>
</g>
<g >
<title>sched_clock (2,272,727,250 samples, 10.19%)</title><rect x="46.9" y="341" width="120.2" height="15.0" fill="rgb(205,73,21)" rx="2" ry="2" />
<text  x="49.88" y="351.5" >sched_clock</text>
</g>
<g >
<title>__x64_sys_gettid (50,505,050 samples, 0.23%)</title><rect x="1015.2" y="197" width="2.7" height="15.0" fill="rgb(226,0,30)" rx="2" ry="2" />
<text  x="1018.24" y="207.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (3,191,919,160 samples, 14.31%)</title><rect x="262.2" y="261" width="168.9" height="15.0" fill="rgb(249,155,6)" rx="2" ry="2" />
<text  x="265.25" y="271.5" >do_softirq_own_stack</text>
</g>
<g >
<title>do_iter_read (2,828,282,800 samples, 12.68%)</title><rect x="29.2" y="453" width="149.7" height="15.0" fill="rgb(243,184,30)" rx="2" ry="2" />
<text  x="32.24" y="463.5" >do_iter_read</text>
</g>
<g >
<title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::size (10,101,010 samples, 0.05%)</title><rect x="961.8" y="453" width="0.5" height="15.0" fill="rgb(214,216,25)" rx="2" ry="2" />
<text  x="964.80" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::function&lt;void  (10,101,010 samples, 0.05%)</title><rect x="1061.2" y="405" width="0.5" height="15.0" fill="rgb(248,55,18)" rx="2" ry="2" />
<text  x="1064.20" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;winterfell::Poller, std::default_delete&lt;winterfell::Poller&gt; &gt;::get (20,202,020 samples, 0.09%)</title><rect x="960.7" y="437" width="1.1" height="15.0" fill="rgb(205,13,2)" rx="2" ry="2" />
<text  x="963.73" y="447.5" ></text>
</g>
<g >
<title>__virt_addr_valid (20,202,020 samples, 0.09%)</title><rect x="41.5" y="341" width="1.1" height="15.0" fill="rgb(226,76,6)" rx="2" ry="2" />
<text  x="44.53" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;winterfell::TcpConnection,  (20,202,020 samples, 0.09%)</title><rect x="987.5" y="277" width="1.0" height="15.0" fill="rgb(232,68,24)" rx="2" ry="2" />
<text  x="990.45" y="287.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (3,989,898,950 samples, 17.89%)</title><rect x="228.6" y="357" width="211.1" height="15.0" fill="rgb(250,131,46)" rx="2" ry="2" />
<text  x="231.58" y="367.5" >__tcp_transmit_skb</text>
</g>
<g >
<title>kmem_cache_free (20,202,020 samples, 0.09%)</title><rect x="410.3" y="69" width="1.0" height="15.0" fill="rgb(245,163,54)" rx="2" ry="2" />
<text  x="413.28" y="79.5" ></text>
</g>
<g >
<title>winterfell::EventLoop::isInLoopThread (10,101,010 samples, 0.05%)</title><rect x="992.8" y="277" width="0.5" height="15.0" fill="rgb(218,224,49)" rx="2" ry="2" />
<text  x="995.80" y="287.5" ></text>
</g>
<g >
<title>__task_pid_nr_ns (20,202,020 samples, 0.09%)</title><rect x="1070.8" y="341" width="1.1" height="15.0" fill="rgb(221,132,23)" rx="2" ry="2" />
<text  x="1073.82" y="351.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.05%)</title><rect x="1044.1" y="133" width="0.5" height="15.0" fill="rgb(239,63,7)" rx="2" ry="2" />
<text  x="1047.10" y="143.5" ></text>
</g>
<g >
<title>clnttcp_create (10,101,010 samples, 0.05%)</title><rect x="955.9" y="565" width="0.6" height="15.0" fill="rgb(239,170,32)" rx="2" ry="2" />
<text  x="958.92" y="575.5" ></text>
</g>
<g >
<title>net_rx_action (3,141,414,110 samples, 14.09%)</title><rect x="264.9" y="229" width="166.2" height="15.0" fill="rgb(206,92,6)" rx="2" ry="2" />
<text  x="267.92" y="239.5" >net_rx_action</text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="954.9" y="437" width="0.5" height="15.0" fill="rgb(253,30,19)" rx="2" ry="2" />
<text  x="957.86" y="447.5" ></text>
</g>
<g >
<title>__inet_lookup_established (50,505,050 samples, 0.23%)</title><rect x="278.3" y="117" width="2.7" height="15.0" fill="rgb(239,68,44)" rx="2" ry="2" />
<text  x="281.28" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::_S_right (10,101,010 samples, 0.05%)</title><rect x="1096.5" y="389" width="0.5" height="15.0" fill="rgb(253,132,16)" rx="2" ry="2" />
<text  x="1099.48" y="399.5" ></text>
</g>
<g >
<title>tcp_urg (10,101,010 samples, 0.05%)</title><rect x="427.9" y="85" width="0.6" height="15.0" fill="rgb(239,170,18)" rx="2" ry="2" />
<text  x="430.92" y="95.5" ></text>
</g>
<g >
<title>____wcstod_l_internal (20,202,020 samples, 0.09%)</title><rect x="984.2" y="293" width="1.1" height="15.0" fill="rgb(226,214,32)" rx="2" ry="2" />
<text  x="987.25" y="303.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.05%)</title><rect x="1046.8" y="293" width="0.5" height="15.0" fill="rgb(219,147,30)" rx="2" ry="2" />
<text  x="1049.78" y="303.5" ></text>
</g>
<g >
<title>winterfell::Buffer::begin (10,101,010 samples, 0.05%)</title><rect x="1054.3" y="309" width="0.5" height="15.0" fill="rgb(247,57,52)" rx="2" ry="2" />
<text  x="1057.26" y="319.5" ></text>
</g>
<g >
<title>fput (10,101,010 samples, 0.05%)</title><rect x="656.1" y="469" width="0.5" height="15.0" fill="rgb(222,212,27)" rx="2" ry="2" />
<text  x="659.11" y="479.5" ></text>
</g>
<g >
<title>__slab_alloc (40,404,040 samples, 0.18%)</title><rect x="553.5" y="325" width="2.1" height="15.0" fill="rgb(252,73,19)" rx="2" ry="2" />
<text  x="556.51" y="335.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (30,303,030 samples, 0.14%)</title><rect x="180.5" y="405" width="1.6" height="15.0" fill="rgb(206,1,35)" rx="2" ry="2" />
<text  x="183.48" y="415.5" ></text>
</g>
<g >
<title>alloc_pages_current (30,303,030 samples, 0.14%)</title><rect x="840.5" y="421" width="1.6" height="15.0" fill="rgb(235,157,52)" rx="2" ry="2" />
<text  x="843.49" y="431.5" ></text>
</g>
<g >
<title>do_readv (2,969,696,940 samples, 13.32%)</title><rect x="26.0" y="485" width="157.2" height="15.0" fill="rgb(237,128,40)" rx="2" ry="2" />
<text  x="29.03" y="495.5" >do_readv</text>
</g>
<g >
<title>winterfell::Buffer::readFd (50,505,050 samples, 0.23%)</title><rect x="1053.2" y="325" width="2.7" height="15.0" fill="rgb(210,45,1)" rx="2" ry="2" />
<text  x="1056.19" y="335.5" ></text>
</g>
<g >
<title>import_iovec (60,606,060 samples, 0.27%)</title><rect x="178.9" y="453" width="3.2" height="15.0" fill="rgb(207,154,13)" rx="2" ry="2" />
<text  x="181.88" y="463.5" ></text>
</g>
<g >
<title>add_wait_queue (10,101,010 samples, 0.05%)</title><rect x="851.7" y="453" width="0.5" height="15.0" fill="rgb(245,99,27)" rx="2" ry="2" />
<text  x="854.71" y="463.5" ></text>
</g>
<g >
<title>common_file_perm (30,303,030 samples, 0.14%)</title><rect x="563.7" y="453" width="1.6" height="15.0" fill="rgb(249,116,35)" rx="2" ry="2" />
<text  x="566.66" y="463.5" ></text>
</g>
<g >
<title>winterfell::Buffer::begin (10,101,010 samples, 0.05%)</title><rect x="1052.7" y="325" width="0.5" height="15.0" fill="rgb(221,86,50)" rx="2" ry="2" />
<text  x="1055.65" y="335.5" ></text>
</g>
<g >
<title>__get_free_pages (101,010,100 samples, 0.45%)</title><rect x="836.7" y="437" width="5.4" height="15.0" fill="rgb(217,9,6)" rx="2" ry="2" />
<text  x="839.75" y="447.5" ></text>
</g>
<g >
<title>winterfell::Timestamp::now (20,202,020 samples, 0.09%)</title><rect x="1188.4" y="453" width="1.1" height="15.0" fill="rgb(227,163,52)" rx="2" ry="2" />
<text  x="1191.40" y="463.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.05%)</title><rect x="954.9" y="421" width="0.5" height="15.0" fill="rgb(210,180,47)" rx="2" ry="2" />
<text  x="957.86" y="431.5" ></text>
</g>
<g >
<title>fput_many (10,101,010 samples, 0.05%)</title><rect x="206.7" y="485" width="0.5" height="15.0" fill="rgb(214,170,15)" rx="2" ry="2" />
<text  x="209.67" y="495.5" ></text>
</g>
<g >
<title>refcount_dec_and_test_checked (10,101,010 samples, 0.05%)</title><rect x="281.5" y="101" width="0.5" height="15.0" fill="rgb(250,21,22)" rx="2" ry="2" />
<text  x="284.49" y="111.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (262,626,260 samples, 1.18%)</title><rect x="244.1" y="293" width="13.9" height="15.0" fill="rgb(222,205,26)" rx="2" ry="2" />
<text  x="247.08" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, winterfell::TcpConnection*&gt; (20,202,020 samples, 0.09%)</title><rect x="1056.9" y="373" width="1.1" height="15.0" fill="rgb(246,72,37)" rx="2" ry="2" />
<text  x="1059.93" y="383.5" ></text>
</g>
<g >
<title>std::swap&lt;std::function&lt;void  (10,101,010 samples, 0.05%)</title><rect x="1061.7" y="405" width="0.6" height="15.0" fill="rgb(224,9,52)" rx="2" ry="2" />
<text  x="1064.74" y="415.5" ></text>
</g>
<g >
<title>std::_Mu&lt;winterfell::TcpConnection*, false, false&gt;::operator (20,202,020 samples, 0.09%)</title><rect x="968.2" y="373" width="1.1" height="15.0" fill="rgb(247,219,46)" rx="2" ry="2" />
<text  x="971.22" y="383.5" ></text>
</g>
<g >
<title>do_softirq.part.19 (3,262,626,230 samples, 14.63%)</title><rect x="258.5" y="277" width="172.6" height="15.0" fill="rgb(253,172,54)" rx="2" ry="2" />
<text  x="261.51" y="287.5" >do_softirq.part.19</text>
</g>
<g >
<title>read_tsc (1,585,858,570 samples, 7.11%)</title><rect x="871.5" y="469" width="83.9" height="15.0" fill="rgb(238,92,44)" rx="2" ry="2" />
<text  x="874.49" y="479.5" >read_tsc</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (181,818,180 samples, 0.82%)</title><rect x="842.1" y="453" width="9.6" height="15.0" fill="rgb(228,211,5)" rx="2" ry="2" />
<text  x="845.09" y="463.5" ></text>
</g>
<g >
<title>rb_erase (20,202,020 samples, 0.09%)</title><rect x="411.3" y="69" width="1.1" height="15.0" fill="rgb(214,93,21)" rx="2" ry="2" />
<text  x="414.35" y="79.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, winterfell::Poller*, std::default_delete&lt;winterfell::Poller&gt; &gt; (10,101,010 samples, 0.05%)</title><rect x="961.3" y="405" width="0.5" height="15.0" fill="rgb(226,143,8)" rx="2" ry="2" />
<text  x="964.27" y="415.5" ></text>
</g>
<g >
<title>aa_sk_perm (50,505,050 samples, 0.23%)</title><rect x="168.7" y="373" width="2.7" height="15.0" fill="rgb(222,103,8)" rx="2" ry="2" />
<text  x="171.72" y="383.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="1044.1" y="165" width="0.5" height="15.0" fill="rgb(214,141,10)" rx="2" ry="2" />
<text  x="1047.10" y="175.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.05%)</title><rect x="1068.7" y="357" width="0.5" height="15.0" fill="rgb(233,26,12)" rx="2" ry="2" />
<text  x="1071.69" y="367.5" ></text>
</g>
<g >
<title>sched_clock_cpu (2,141,414,120 samples, 9.60%)</title><rect x="283.1" y="85" width="113.3" height="15.0" fill="rgb(235,228,11)" rx="2" ry="2" />
<text  x="286.09" y="95.5" >sched_clock_cpu</text>
</g>
<g >
<title>release_sock (10,101,010 samples, 0.05%)</title><rect x="39.4" y="373" width="0.5" height="15.0" fill="rgb(212,63,38)" rx="2" ry="2" />
<text  x="42.39" y="383.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (70,707,070 samples, 0.32%)</title><rect x="555.6" y="357" width="3.8" height="15.0" fill="rgb(215,204,35)" rx="2" ry="2" />
<text  x="558.64" y="367.5" ></text>
</g>
<g >
<title>tcp_rate_check_app_limited (20,202,020 samples, 0.09%)</title><rect x="559.9" y="389" width="1.1" height="15.0" fill="rgb(222,5,16)" rx="2" ry="2" />
<text  x="562.92" y="399.5" ></text>
</g>
<g >
<title>winterfell::Timestamp::now (1,505,050,490 samples, 6.75%)</title><rect x="1107.2" y="437" width="79.6" height="15.0" fill="rgb(226,193,27)" rx="2" ry="2" />
<text  x="1110.16" y="447.5" >winterfel..</text>
</g>
<g >
<title>__local_bh_enable_ip (10,101,010 samples, 0.05%)</title><rect x="247.8" y="277" width="0.6" height="15.0" fill="rgb(218,195,27)" rx="2" ry="2" />
<text  x="250.82" y="287.5" ></text>
</g>
<g >
<title>apparmor_file_permission (10,101,010 samples, 0.05%)</title><rect x="176.2" y="421" width="0.5" height="15.0" fill="rgb(213,129,10)" rx="2" ry="2" />
<text  x="179.20" y="431.5" ></text>
</g>
<g >
<title>lock_sock_nested (20,202,020 samples, 0.09%)</title><rect x="214.1" y="405" width="1.1" height="15.0" fill="rgb(232,110,29)" rx="2" ry="2" />
<text  x="217.15" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;winterfell::Channel, std::default_delete&lt;winterfell::Channel&gt; &gt;::_M_ptr (30,303,030 samples, 0.14%)</title><rect x="1021.7" y="213" width="1.6" height="15.0" fill="rgb(240,35,40)" rx="2" ry="2" />
<text  x="1024.66" y="223.5" ></text>
</g>
<g >
<title>std::less&lt;int&gt;::operator (80,808,080 samples, 0.36%)</title><rect x="1090.6" y="373" width="4.3" height="15.0" fill="rgb(208,17,13)" rx="2" ry="2" />
<text  x="1093.60" y="383.5" ></text>
</g>
<g >
<title>token (3,252,525,220 samples, 14.58%)</title><rect x="11.1" y="533" width="172.1" height="15.0" fill="rgb(235,41,51)" rx="2" ry="2" />
<text  x="14.07" y="543.5" >token</text>
</g>
<g >
<title>[unknown] (10,494,949,390 samples, 47.06%)</title><rect x="10.0" y="565" width="555.3" height="15.0" fill="rgb(217,131,36)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >[unknown]</text>
</g>
<g >
<title>aa_sk_perm (10,101,010 samples, 0.05%)</title><rect x="212.0" y="405" width="0.5" height="15.0" fill="rgb(207,62,25)" rx="2" ry="2" />
<text  x="215.01" y="415.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;winterfell::TcpConnection&gt;::shared_ptr&lt;winterfell::TcpConnection, void&gt; (60,606,060 samples, 0.27%)</title><rect x="974.1" y="309" width="3.2" height="15.0" fill="rgb(211,159,52)" rx="2" ry="2" />
<text  x="977.09" y="319.5" ></text>
</g>
<g >
<title>__fsnotify_parent (10,101,010 samples, 0.05%)</title><rect x="175.7" y="421" width="0.5" height="15.0" fill="rgb(226,34,39)" rx="2" ry="2" />
<text  x="178.67" y="431.5" ></text>
</g>
<g >
<title>tcp_rbtree_insert (10,101,010 samples, 0.05%)</title><rect x="544.4" y="341" width="0.6" height="15.0" fill="rgb(213,89,47)" rx="2" ry="2" />
<text  x="547.42" y="351.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (10,101,010 samples, 0.05%)</title><rect x="183.7" y="549" width="0.5" height="15.0" fill="rgb(236,221,46)" rx="2" ry="2" />
<text  x="186.69" y="559.5" ></text>
</g>
<g >
<title>ipv4_mtu (10,101,010 samples, 0.05%)</title><rect x="561.5" y="357" width="0.6" height="15.0" fill="rgb(220,124,36)" rx="2" ry="2" />
<text  x="564.52" y="367.5" ></text>
</g>
<g >
<title>refcount_sub_and_test_checked (20,202,020 samples, 0.09%)</title><rect x="254.2" y="229" width="1.1" height="15.0" fill="rgb(244,222,25)" rx="2" ry="2" />
<text  x="257.23" y="239.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, winterfell::Channel*, std::default_delete&lt;winterfell::Channel&gt; &gt; (30,303,030 samples, 0.14%)</title><rect x="1021.7" y="197" width="1.6" height="15.0" fill="rgb(238,66,36)" rx="2" ry="2" />
<text  x="1024.66" y="207.5" ></text>
</g>
<g >
<title>poll_freewait (383,838,380 samples, 1.72%)</title><rect x="647.0" y="485" width="20.3" height="15.0" fill="rgb(217,130,31)" rx="2" ry="2" />
<text  x="650.03" y="495.5" ></text>
</g>
<g >
<title>lock_timer_base (10,101,010 samples, 0.05%)</title><rect x="399.1" y="53" width="0.5" height="15.0" fill="rgb(227,117,35)" rx="2" ry="2" />
<text  x="402.06" y="63.5" ></text>
</g>
<g >
<title>winterfell::MutexLockGuard::MutexLockGuard (10,101,010 samples, 0.05%)</title><rect x="1073.0" y="453" width="0.5" height="15.0" fill="rgb(210,215,27)" rx="2" ry="2" />
<text  x="1075.96" y="463.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4,414,141,370 samples, 19.79%)</title><rect x="956.5" y="501" width="233.5" height="15.0" fill="rgb(239,120,14)" rx="2" ry="2" />
<text  x="959.46" y="511.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>skb_release_all (10,101,010 samples, 0.05%)</title><rect x="36.2" y="357" width="0.5" height="15.0" fill="rgb(247,66,34)" rx="2" ry="2" />
<text  x="39.19" y="367.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (10,101,010 samples, 0.05%)</title><rect x="742.2" y="373" width="0.5" height="15.0" fill="rgb(222,130,17)" rx="2" ry="2" />
<text  x="745.16" y="383.5" ></text>
</g>
<g >
<title>__pollwait (222,222,220 samples, 1.00%)</title><rect x="830.3" y="453" width="11.8" height="15.0" fill="rgb(232,201,26)" rx="2" ry="2" />
<text  x="833.34" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;winterfell::Channel*, std::allocator&lt;winterfell::Channel*&gt; &gt;::push_back (20,202,020 samples, 0.09%)</title><rect x="1099.7" y="421" width="1.1" height="15.0" fill="rgb(254,13,49)" rx="2" ry="2" />
<text  x="1102.68" y="431.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (40,404,040 samples, 0.18%)</title><rect x="42.6" y="325" width="2.1" height="15.0" fill="rgb(222,205,33)" rx="2" ry="2" />
<text  x="45.60" y="335.5" ></text>
</g>
<g >
<title>ipv4_dst_check (40,404,040 samples, 0.18%)</title><rect x="236.1" y="309" width="2.1" height="15.0" fill="rgb(246,155,31)" rx="2" ry="2" />
<text  x="239.06" y="319.5" ></text>
</g>
<g >
<title>sched_clock (2,131,313,110 samples, 9.56%)</title><rect x="283.6" y="69" width="112.8" height="15.0" fill="rgb(232,162,2)" rx="2" ry="2" />
<text  x="286.62" y="79.5" >sched_clock</text>
</g>
<g >
<title>sock_read_iter (2,686,868,660 samples, 12.05%)</title><rect x="30.3" y="421" width="142.2" height="15.0" fill="rgb(206,196,44)" rx="2" ry="2" />
<text  x="33.31" y="431.5" >sock_read_iter</text>
</g>
<g >
<title>__fsnotify_parent (20,202,020 samples, 0.09%)</title><rect x="207.2" y="469" width="1.1" height="15.0" fill="rgb(225,48,2)" rx="2" ry="2" />
<text  x="210.20" y="479.5" ></text>
</g>
<g >
<title>tcp_current_mss (10,101,010 samples, 0.05%)</title><rect x="561.5" y="373" width="0.6" height="15.0" fill="rgb(232,103,14)" rx="2" ry="2" />
<text  x="564.52" y="383.5" ></text>
</g>
<g >
<title>__ip_local_out (10,101,010 samples, 0.05%)</title><rect x="238.2" y="309" width="0.5" height="15.0" fill="rgb(247,86,1)" rx="2" ry="2" />
<text  x="241.20" y="319.5" ></text>
</g>
<g >
<title>sk_reset_timer (30,303,030 samples, 0.14%)</title><rect x="542.8" y="341" width="1.6" height="15.0" fill="rgb(244,35,17)" rx="2" ry="2" />
<text  x="545.82" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.05%)</title><rect x="1051.1" y="261" width="0.5" height="15.0" fill="rgb(232,4,45)" rx="2" ry="2" />
<text  x="1054.05" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (222,222,220 samples, 1.00%)</title><rect x="1006.2" y="213" width="11.7" height="15.0" fill="rgb(210,178,34)" rx="2" ry="2" />
<text  x="1009.16" y="223.5" ></text>
</g>
<g >
<title>finish_task_switch (10,101,010 samples, 0.05%)</title><rect x="633.7" y="421" width="0.5" height="15.0" fill="rgb(241,171,47)" rx="2" ry="2" />
<text  x="636.67" y="431.5" ></text>
</g>
<g >
<title>tcp_ack_update_rtt.isra.48 (20,202,020 samples, 0.09%)</title><rect x="413.0" y="69" width="1.0" height="15.0" fill="rgb(247,121,33)" rx="2" ry="2" />
<text  x="415.95" y="79.5" ></text>
</g>
<g >
<title>getifaddrs_internal (383,838,380 samples, 1.72%)</title><rect x="997.6" y="245" width="20.3" height="15.0" fill="rgb(227,48,16)" rx="2" ry="2" />
<text  x="1000.61" y="255.5" ></text>
</g>
<g >
<title>get_task_policy.part.36 (20,202,020 samples, 0.09%)</title><rect x="840.5" y="405" width="1.1" height="15.0" fill="rgb(243,204,40)" rx="2" ry="2" />
<text  x="843.49" y="415.5" ></text>
</g>
<g >
<title>__check_object_size (50,505,050 samples, 0.23%)</title><rect x="39.9" y="357" width="2.7" height="15.0" fill="rgb(227,13,21)" rx="2" ry="2" />
<text  x="42.93" y="367.5" ></text>
</g>
<g >
<title>vfs_write (6,767,676,700 samples, 30.34%)</title><rect x="207.2" y="485" width="358.1" height="15.0" fill="rgb(237,66,4)" rx="2" ry="2" />
<text  x="210.20" y="495.5" >vfs_write</text>
</g>
<g >
<title>ktime_get_ts64 (1,636,363,620 samples, 7.34%)</title><rect x="868.8" y="485" width="86.6" height="15.0" fill="rgb(210,42,39)" rx="2" ry="2" />
<text  x="871.81" y="495.5" >ktime_get_..</text>
</g>
<g >
<title>std::allocator&lt;char&gt;::~allocator (10,101,010 samples, 0.05%)</title><rect x="990.1" y="277" width="0.6" height="15.0" fill="rgb(241,222,8)" rx="2" ry="2" />
<text  x="993.13" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (30,303,030 samples, 0.14%)</title><rect x="542.8" y="309" width="1.6" height="15.0" fill="rgb(232,64,23)" rx="2" ry="2" />
<text  x="545.82" y="319.5" ></text>
</g>
<g >
<title>winterfell::SubLoops::start (4,414,141,370 samples, 19.79%)</title><rect x="956.5" y="485" width="233.5" height="15.0" fill="rgb(213,60,24)" rx="2" ry="2" />
<text  x="959.46" y="495.5" >winterfell::SubLoops::start</text>
</g>
<g >
<title>select_estimate_accuracy (1,353,535,340 samples, 6.07%)</title><rect x="671.6" y="485" width="71.6" height="15.0" fill="rgb(236,33,30)" rx="2" ry="2" />
<text  x="674.61" y="495.5" >select_e..</text>
</g>
<g >
<title>___slab_alloc (20,202,020 samples, 0.09%)</title><rect x="558.3" y="325" width="1.1" height="15.0" fill="rgb(220,167,22)" rx="2" ry="2" />
<text  x="561.32" y="335.5" ></text>
</g>
<g >
<title>__tcp_select_window (20,202,020 samples, 0.09%)</title><rect x="45.3" y="357" width="1.0" height="15.0" fill="rgb(231,91,51)" rx="2" ry="2" />
<text  x="48.27" y="367.5" ></text>
</g>
<g >
<title>winterfell::Singleton&lt;winterfell::Logger&gt;::GetInstance (30,303,030 samples, 0.14%)</title><rect x="1186.8" y="453" width="1.6" height="15.0" fill="rgb(207,12,33)" rx="2" ry="2" />
<text  x="1189.79" y="463.5" ></text>
</g>
<g >
<title>schedule (80,808,080 samples, 0.36%)</title><rect x="667.3" y="453" width="4.3" height="15.0" fill="rgb(236,224,10)" rx="2" ry="2" />
<text  x="670.34" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (30,303,030 samples, 0.14%)</title><rect x="975.7" y="261" width="1.6" height="15.0" fill="rgb(233,222,22)" rx="2" ry="2" />
<text  x="978.70" y="271.5" ></text>
</g>
<g >
<title>new_slab (30,303,030 samples, 0.14%)</title><rect x="554.0" y="293" width="1.6" height="15.0" fill="rgb(206,100,21)" rx="2" ry="2" />
<text  x="557.04" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;pollfd const*, std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt; &gt;::base (10,101,010 samples, 0.05%)</title><rect x="1082.0" y="421" width="0.6" height="15.0" fill="rgb(217,221,17)" rx="2" ry="2" />
<text  x="1085.05" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::function&lt;void  (10,101,010 samples, 0.05%)</title><rect x="1059.6" y="421" width="0.5" height="15.0" fill="rgb(238,56,53)" rx="2" ry="2" />
<text  x="1062.60" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, winterfell::Channel*, std::default_delete&lt;winterfell::Channel&gt; &gt;::_M_head (10,101,010 samples, 0.05%)</title><rect x="1051.6" y="261" width="0.5" height="15.0" fill="rgb(253,217,10)" rx="2" ry="2" />
<text  x="1054.59" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_poll (7,141,414,070 samples, 32.02%)</title><rect x="577.6" y="517" width="377.8" height="15.0" fill="rgb(239,13,50)" rx="2" ry="2" />
<text  x="580.55" y="527.5" >__x64_sys_poll</text>
</g>
<g >
<title>winterfell::PollPoller::poll (10,101,010 samples, 0.05%)</title><rect x="1189.5" y="469" width="0.5" height="15.0" fill="rgb(239,57,15)" rx="2" ry="2" />
<text  x="1192.47" y="479.5" ></text>
</g>
<g >
<title>ip_output (3,727,272,690 samples, 16.71%)</title><rect x="238.7" y="325" width="197.2" height="15.0" fill="rgb(230,35,28)" rx="2" ry="2" />
<text  x="241.73" y="335.5" >ip_output</text>
</g>
<g >
<title>getifaddrs_internal (383,838,380 samples, 1.72%)</title><rect x="1024.3" y="213" width="20.3" height="15.0" fill="rgb(238,66,46)" rx="2" ry="2" />
<text  x="1027.33" y="223.5" ></text>
</g>
<g >
<title>netif_rx_internal (50,505,050 samples, 0.23%)</title><rect x="250.5" y="245" width="2.7" height="15.0" fill="rgb(206,2,13)" rx="2" ry="2" />
<text  x="253.49" y="255.5" ></text>
</g>
<g >
<title>winterfell::TcpConnection::sendInLoop (505,050,500 samples, 2.26%)</title><rect x="1017.9" y="261" width="26.7" height="15.0" fill="rgb(246,173,9)" rx="2" ry="2" />
<text  x="1020.92" y="271.5" >w..</text>
</g>
<g >
<title>__sk_dst_check (50,505,050 samples, 0.23%)</title><rect x="235.5" y="325" width="2.7" height="15.0" fill="rgb(223,116,26)" rx="2" ry="2" />
<text  x="238.53" y="335.5" ></text>
</g>
<g >
<title>winterfell::PollPoller::fillActiveChannels (10,101,010 samples, 0.05%)</title><rect x="1074.0" y="453" width="0.6" height="15.0" fill="rgb(231,87,29)" rx="2" ry="2" />
<text  x="1077.03" y="463.5" ></text>
</g>
<g >
<title>apparmor_file_permission (10,101,010 samples, 0.05%)</title><rect x="563.1" y="453" width="0.6" height="15.0" fill="rgb(245,83,9)" rx="2" ry="2" />
<text  x="566.12" y="463.5" ></text>
</g>
<g >
<title>schedule (10,101,010 samples, 0.05%)</title><rect x="1063.3" y="357" width="0.6" height="15.0" fill="rgb(209,8,20)" rx="2" ry="2" />
<text  x="1066.34" y="367.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.05%)</title><rect x="44.2" y="261" width="0.5" height="15.0" fill="rgb(226,225,19)" rx="2" ry="2" />
<text  x="47.20" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, winterfell::Channel*&gt;, std::_Select1st&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, winterfell::Channel*&gt; &gt; &gt;::_S_right (10,101,010 samples, 0.05%)</title><rect x="1089.5" y="373" width="0.6" height="15.0" fill="rgb(237,36,16)" rx="2" ry="2" />
<text  x="1092.53" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;winterfell::Channel*&gt; &gt;::construct&lt;winterfell::Channel*, winterfell::Channel* const&amp;&gt; (20,202,020 samples, 0.09%)</title><rect x="1099.7" y="405" width="1.1" height="15.0" fill="rgb(226,99,49)" rx="2" ry="2" />
<text  x="1102.68" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::function&lt;void  (40,404,040 samples, 0.18%)</title><rect x="1060.1" y="437" width="2.2" height="15.0" fill="rgb(209,175,9)" rx="2" ry="2" />
<text  x="1063.14" y="447.5" ></text>
</g>
</g>
</svg>
